////////////////////////////////////////////////////////////////////////////
//
// Скрипт управляет запуском синхронизации с GIT по нескольким репозиториям
// Copyright EvilBeaver 2015
//
////////////////////////////////////////////////////////////////////////////
#Использовать logos

Перем Лог;
Перем мРаспаковщик;

Процедура СинхронизироватьХранилища(Знач ПровайдерНастроек, Знач ОбработчикСинхронизации, Знач Принудительно = Ложь) Экспорт

    Лог.Информация("Синхронизация началась");

    Для Каждого Репо Из ПровайдерНастроек["Репозитарии"] Цикл

	   Попытка

			Если Принудительно Тогда
				ВыполнитьСинхронизациюПоОдномуРепо(Репо, ОбработчикСинхронизации);
			Иначе
				ВыполнитьСинхронизациюПриНеобходимости(Репо, ОбработчикСинхронизации);
			КонецЕсли;

		Исключение
			Лог.Ошибка(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;

	КонецЦикла;

    Лог.Информация("Синхронизация завершена");

КонецПроцедуры

Процедура ВыполнитьСинхронизациюПоОдномуРепо(Знач Репо, Знач ОбработчикСинхронизации)

	Лог.Информация("Синхронизация для '"+Репо["Имя"]+"'");
	ОбработчикСинхронизации.ПриНеобходимостиСинхронизации(Репо);

КонецПроцедуры

Процедура ВыполнитьСинхронизациюПриНеобходимости(Знач Репо, Знач ОбработчикСинхронизации)

	Лог.Информация("Проверяю необходимость синхронизации: " + Репо["Имя"]);
	Если Не НеобходимоСинхронизироватьХранилище(Репо, ОбработчикСинхронизации) Тогда
		Лог.Информация("Синхронизация для '"+Репо["Имя"]+"' не требуется");
		Возврат;
	КонецЕсли;

	ВыполнитьСинхронизациюПоОдномуРепо(Репо, ОбработчикСинхронизации);

КонецПроцедуры

Функция НеобходимоСинхронизироватьХранилище(Знач Репо, Знач ОбработчикСинхронизации)

	Возврат ОбработчикСинхронизации.ТребуетсяСинхронизироватьХранилище(Репо);

КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.app.gitsync");
