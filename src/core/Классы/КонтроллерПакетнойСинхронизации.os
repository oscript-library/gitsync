////////////////////////////////////////////////////////////////////////////
//
// Скрипт управляет запуском синхронизации с GIT по нескольким репозиториям
// Copyright EvilBeaver 2015
//
////////////////////////////////////////////////////////////////////////////

#Использовать cmdline

Перем мПараметрыКоманды;
Перем мДополнительныеПараметры;
Перем мНастройки;
Перем мФлагПринудительнойСинхронизации;


////////////////////////////////////////////////////////////////////////
// Программный интерфейс

Процедура ВыполнитьСинхронизациюПоФайлуНастроек(Знач ПараметрыКоманды, Знач ДополнительныеПараметры, Знач ФайлНастроек, Знач Принудительно = Ложь) Экспорт

	ПрочитатьНастройкиИзФайла(ФайлНастроек);
	мФлагПринудительнойСинхронизации = Принудительно;
	мПараметрыКоманды = ПараметрыКоманды;
	мДополнительныеПараметры = ДополнительныеПараметры;

	СинхронизироватьХранилища();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Работа с конфигурационным файлом

Процедура ПрочитатьНастройкиИзФайла(Знач ФайлНастроек)

	ФайлКонфига = Новый Файл(ФайлНастроек);
	Расширение = ФайлКонфига.Расширение; 
	
	Если Расширение = ".xml" Тогда
		
		ПрочитатьНастройкиИзФайлаXML(ФайлНастроек);

	ИначеЕсли Расширение = ".json" Тогда
	
		ПрочитатьНастройкиИзФайлаJSON(ФайлНастроек);

	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьНастройкиИзФайлаXML(Знач ФайлНастроек)
	
		Конфиг = Новый ЧтениеКонфигаXMLПакетнойСинхронизации(СоответствиеКлючамИПараметра());
		мНастройки = Конфиг.ПрочитатьНастройкиИзФайла(ФайлНастроек);
	
КонецПроцедуры

Процедура ПрочитатьНастройкиИзФайлаJSON(Знач ФайлНастроек)
	
		Конфиг = Новый ЧтениеКонфигаJSONПакетнойСинхронизации(СоответствиеКлючамИПараметра());
		мНастройки = Конфиг.ПрочитатьНастройкиИзФайла(ФайлНастроек);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Вспомогательные методы

Функция СинхронизироватьПринудительно()

	Возврат мФлагПринудительнойСинхронизации;

КонецФункции

Процедура СинхронизироватьХранилища()

	ПакетнаяСинхронизация = Новый ПакетнаяСинхронизация;
	ПакетнаяСинхронизация.СинхронизироватьХранилища(мНастройки, ЭтотОбъект, СинхронизироватьПринудительно())

КонецПроцедуры

// Вызывается в качестве обработчика из класса ПакетнаяСинхронизация
//
Процедура ПриНеобходимостиСинхронизации(Знач ПараметрыРепо) Экспорт

	// дополним настройками из параметров команды
	Для Каждого ПараметрКоманды Из мПараметрыКоманды Цикл

		ПараметрыРепо.Вставить(ПараметрКоманды.Ключ, ПараметрКоманды.Значение);

	КонецЦикла;
	мДополнительныеПараметры.Плагины.УстановитьАктивныеПлагины(ПараметрыРепо);
	мДополнительныеПараметры.Плагины.ПриПолученииПараметров(ПараметрыРепо, мДополнительныеПараметры);
	
	Лог = мДополнительныеПараметры.Лог;
	Лог.Информация("Начинаю синхронизацию хранилища 1С и репозитария GIT");

	ПутьКХранилищу			= ПараметрыРепо["ПутьКХранилищу"];
	URLРепозитория			= ПараметрыРепо["URLРепозитория"];
	ЛокальныйКаталогГит		= ПараметрыРепо["ЛокальныйКаталогГит"];
	ДоменПочты				= ПараметрыРепо["-email"];
	ВерсияПлатформы			= ПараметрыРепо["-v8version"];
	Формат					= ПараметрыРепо["-format"];
	ИмяВетки				= ПараметрыРепо["-branch"];

	Если Формат = Неопределено Тогда

		Формат = РежимВыгрузкиФайлов.Авто;

	КонецЕсли;

	Если ИмяВетки = Неопределено Тогда

		ИмяВетки = "master";

	КонецЕсли;

	ФайлЛокальныйКаталогГит = Новый Файл(ЛокальныйКаталогГит);
	ЛокальныйКаталогГит = ФайлЛокальныйКаталогГит.ПолноеИмя;

	ФайлПутьКХранилищу = Новый Файл(ПутьКХранилищу);
	ПутьКХранилищу = ФайлПутьКХранилищу.ПолноеИмя;

	Лог.Отладка("ПутьКХранилищу = " + ПутьКХранилищу);
	Лог.Отладка("URLРепозитория = " + URLРепозитория);
	Лог.Отладка("ЛокальныйКаталогГит = " + ЛокальныйКаталогГит);
	Лог.Отладка("ДоменПочты = " + ДоменПочты);
	Лог.Отладка("ВерсияПлатформы = " + ВерсияПлатформы);
	Лог.Отладка("Формат = " + Формат);
	Лог.Отладка("ИмяВетки = " + ИмяВетки);
	
	Распаковщик = РаспаковщикКонфигурации.ПолучитьИНастроитьРаспаковщик(ПараметрыРепо, мДополнительныеПараметры);
	Распаковщик.ВерсияПлатформы = ВерсияПлатформы;
	Распаковщик.ДоменПочтыДляGitПоУмолчанию = ДоменПочты;
	
	Лог.Информация("Синхронизация изменений с хранилищем");
	Распаковщик.СинхронизироватьХранилищеКонфигурацийСГит(ЛокальныйКаталогГит,
							ПутьКХранилищу, 
							Формат, 
							URLРепозитория,
							ИмяВетки);

	Лог.Информация("Синхронизация завершена");

	//МенеджерКомандПриложения.ВыполнитьКоманду("sync", Репо);

КонецПроцедуры

Функция ТребуетсяСинхронизироватьХранилище(Знач Репо) Экспорт
	
	Возврат РаспаковщикКонфигурации.ТребуетсяСинхронизироватьХранилище(
				ИмяФайлаБазыХранилища(Репо["ПутьКХранилищу"]), 
				Репо["ЛокальныйКаталогГит"], 
				мДополнительныеПараметры);
		
КонецФункции

Функция ИмяФайлаБазыХранилища(Знач Каталог)
	Возврат ОбъединитьПути(Каталог, "1cv8ddb.1CD");
КонецФункции

Функция СоответствиеКлючамИПараметра() Экспорт
	
	СоответствиеПозиционныхПараметров = Новый Соответствие();
	СоответствиеПозиционныхПараметров.Вставить("git-local-path", "ЛокальныйКаталогГит");
	СоответствиеПозиционныхПараметров.Вставить("git-remote", "URLРепозитория");
	СоответствиеПозиционныхПараметров.Вставить("name", "Имя");
	СоответствиеПозиционныхПараметров.Вставить("v8-storage-dir", "ПутьКХранилищу");

	Возврат СоответствиеПозиционныхПараметров;
	//Возврат Новый ФиксированноеСоответствие(СоответствиеПозиционныхПараметров);

КонецФункции

