///////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль основан на проекте v83unpack (https://github.com/xDrivenDevelopment/v83unpack)
// и является скорее глубоким рефакторингом под 1Script, нежели самостоятельной разработкой.
//
// Использует также утилиту Tool_1CD от awa (http://infostart.ru/public/19633/)
//
///////////////////////////////////////////////////////////////////////////////////////////////

#Использовать tool1cd
#Использовать logos
#Использовать tempfiles
#Использовать v8runner
#Использовать strings

Перем Лог;
Перем мФайлПрограммыРаспаковки;
Перем мАвторизацияВХранилищеСредствами1С;
Перем ЭтоWindows;
Перем УдалятьВременныеФайлы;

///////////////////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Перем ДоменПочтыДляGitПоУмолчанию Экспорт;
Перем ВерсияПлатформы Экспорт;

// Выполняет выгрузку конфигурации в файлы
// и распределение файлов по каталогам согласно иерархии метаданных.
//
Процедура РазобратьФайлКонфигурации(Знач ФайлКонфигурации, Знач ВыходнойКаталог, Знач Формат) Экспорт

	ОбъектФайл = Новый Файл(ФайлКонфигурации);
	Если Не ОбъектФайл.Существует() Тогда
		ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Файл конфигурации %1 не найден", ФайлКонфигурации.ПолноеИмя);
	КонецЕсли;

	КаталогПлоскойВыгрузки = ВременныеФайлы.СоздатьКаталог();

	Если Не (Новый Файл(ВыходнойКаталог).Существует()) Тогда
		СоздатьКаталог(ВыходнойКаталог);
	КонецЕсли;

	Попытка
		ВыгрузитьМодулиКонфигурации(ФайлКонфигурации, КаталогПлоскойВыгрузки, Формат);
		РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(КаталогПлоскойВыгрузки, ВыходнойКаталог, Формат);
	Исключение
		УдалитьВременныеФайлыПриНеобходимости(КаталогПлоскойВыгрузки);
		ВызватьИсключение;
	КонецПопытки;

	УдалитьВременныеФайлыПриНеобходимости(КаталогПлоскойВыгрузки);

КонецПроцедуры

// Выполняет штатную выгрузку конфигурации в файлы (средствами платформы 8.3)
//
Процедура ВыгрузитьМодулиКонфигурации(Знач ФайлКонфигурации, Знач КаталогПлоскойВыгрузки, Знач Формат) Экспорт

	Конфигуратор = ПолучитьМенеджерКонфигуратора();
	Если ВерсияПлатформы <> Неопределено Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	Иначе
		Конфигуратор.ИспользоватьВерсиюПлатформы("8.3");
	КонецЕсли;

	ЛогКонфигуратора = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	ЛогКонфигуратора.УстановитьУровень(Лог.Уровень());

	Попытка

		Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации, Ложь);

	Исключение

		// проверим текст ошибки, если текст содержит информацию о необходимости конвертировать
		// тогда выполним конвертацию и повторно попытаемся загрузить файл
		ТекстОшибки = Конфигуратор.ВыводКоманды();
		Если Найти(Врег(ТекстОшибки), Врег("Структура конфигурации несовместима с текущей версией программы")) Тогда

			Конфигуратор.СконвертироватьФайлКонфигурации(ФайлКонфигурации);
			Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации, Ложь);

		Иначе

			ВызватьИсключение ТекстОшибки;

		КонецЕсли;

	КонецПопытки;

	Если Не (Новый Файл(КаталогПлоскойВыгрузки).Существует()) Тогда
		СоздатьКаталог(КаталогПлоскойВыгрузки);
	КонецЕсли;

	МассивФайлов = НайтиФайлы(КаталогПлоскойВыгрузки, ПолучитьМаскуВсеФайлы());
	Если МассивФайлов.Количество() <> 0 Тогда
		ВызватьИсключение "В каталоге <"+КаталогПлоскойВыгрузки+"> не должно быть файлов";
	КонецЕсли;

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрДампаКонфигурации = СтрШаблон("/DumpConfigToFiles ""%1"" -format %2", КаталогПлоскойВыгрузки, ТРег(Формат));
	ПараметрыЗапуска.Добавить(ПараметрДампаКонфигурации);

	ВыполнитьКомандуКонфигуратора(Конфигуратор, ПараметрыЗапуска);

КонецПроцедуры

Функция ПолучитьМенеджерКонфигуратора()
	Конфигуратор = Новый УправлениеКонфигуратором;
	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());
	КаталогСборки = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогСборки);
	Возврат Конфигуратор;
КонецФункции

Процедура ВыполнитьКомандуКонфигуратора(Знач Конфигуратор, Знач ПараметрыЗапуска)

	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		УдалитьВременныеФайлыПриНеобходимости(Конфигуратор.КаталогСборки());
		ВызватьИсключение;
	КонецПопытки;

	УдалитьВременныеФайлыПриНеобходимости(Конфигуратор.КаталогСборки());

КонецПроцедуры

// Выполняет перенос файлов из каталога плоской выгрузки в каталог с иерархической структурой метаданных.
//
Процедура РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(Знач КаталогПлоскойВыгрузки, Знач КаталогИерархическойВыгрузки, Знач Формат) Экспорт

	Лог.Информация("Раскладываем модули по папкам согласно иерархии метаданных");

	КэшПереименований = Новый Соответствие;

	УбедитьсяЧтоФайлИлиКаталогСуществует(КаталогПлоскойВыгрузки);

	Если ПустаяСтрока(КаталогИерархическойВыгрузки) Тогда
		ВызватьИсключение "Не задан каталог выгрузки модулей по иерархии";
	КонецЕсли;

	ФайлВыгрузкиКаталог = Новый Файл(КаталогИерархическойВыгрузки);
	Если Не ФайлВыгрузкиКаталог.Существует() Тогда
		СоздатьКаталог(КаталогИерархическойВыгрузки);
		//ЗарегистрироватьВременныйФайл(КаталогИерархическойСтруктурыМодулей); TODO выяснить почему временный?
	КонецЕсли;

	ЗавершитьПроцесс_TGitCache_exe();

	ОчиститьЦелевойКаталогВыгрузки(КаталогИерархическойВыгрузки);

	Переименования = Новый ТаблицаЗначений;
	Переименования.Колонки.Добавить("Источник");
	Переименования.Колонки.Добавить("Приемник");

	НативнаяИерархия = ЭтоНативнаяИерархия(КаталогПлоскойВыгрузки);
	СписокФайлов = НайтиФайлы(КаталогПлоскойВыгрузки, ПолучитьМаскуВсеФайлы(), НативнаяИерархия);
	Лог.Отладка("Найдено файлов выгрузки: "+СписокФайлов.Количество()+" шт.");
	Для Каждого Файл Из СписокФайлов Цикл
		ИмяФайлаДляПереименования = Файл.Имя;
		Если НативнаяИерархия Тогда
			ИмяНовогоФайла = СтрЗаменить(Файл.ПолноеИмя, КаталогПлоскойВыгрузки, "");
			ИмяНовогоФайла = ?(Лев(ИмяНовогоФайла, 1) ="/", Сред(ИмяНовогоФайла, 2), ИмяНовогоФайла);
			ИмяНовогоФайла = ?(Лев(ИмяНовогоФайла, 1) ="\", Сред(ИмяНовогоФайла, 2), ИмяНовогоФайла);
			Если Файл.ЭтоКаталог() Тогда
				ИмяКаталога = ОбъединитьПути(КаталогИерархическойВыгрузки, ИмяНовогоФайла);
				ФайлКаталога = Новый Файл(ИмяКаталога);
				Если ФайлКаталога.Существует() = Ложь Тогда
					СоздатьКаталог(ИмяКаталога);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ИмяФайлаДляПереименования = ИмяНовогоФайла;
		Иначе
			Если Файл.ЭтоКаталог() Тогда
				ОбработатьКаталогРезультатаВыгрузки(Файл, КаталогИерархическойВыгрузки, Переименования);
				Продолжить;
			КонецЕсли;

			ИмяФайла = СкорректироватьИмяФайлаМетаданных(Файл.ИмяБезРасширения);

			//Определим длину Наименования папки, по умолчанию не больше 60 символов.
			Если СтрДлина(ИмяФайла)>144 Тогда
				СократитьДлинуИмениФайла(ИмяФайла, КаталогИерархическойВыгрузки);
			КонецЕсли;

			ИмяНовогоФайла = СтрЗаменить(ИмяФайла, ".", ПолучитьРазделительПути())+Файл.Расширение;

		КонецЕсли;

		НовыйФайл = Новый Файл(ОбъединитьПути(КаталогИерархическойВыгрузки, ИмяНовогоФайла));
		НовыйКаталог = Новый Файл(НовыйФайл.Путь);
		Если НЕ НовыйКаталог.Существует() Тогда
			СоздатьКаталог(НовыйКаталог.ПолноеИмя);
		КонецЕсли;

		ДобавитьПереименование(Переименования,ИмяФайлаДляПереименования,ИмяНовогоФайла);

		КопироватьФайл(Файл.ПолноеИмя, НовыйФайл.ПолноеИмя);

		Если Нрег(Прав(Файл.ПолноеИмя, 5)) = ".form" Или Нрег(Файл.Имя) = "form.bin" Тогда
			КаталогФормы = ОбъединитьПути(НовыйКаталог.ПолноеИмя, НовыйФайл.ИмяБезРасширения);
			СоздатьКаталог(КаталогФормы);
			РаспаковатьКонтейнерМетаданных(НовыйФайл.ПолноеИмя, КаталогФормы)
		КонецЕсли;

	КонецЦикла;

	ТекстовыйДокумент = Новый ЗаписьТекста(ОбъединитьПути(КаталогИерархическойВыгрузки, "renames.txt"));
	Для Каждого ЭлементСтроки Из Переименования Цикл
		ТекстовыйДокумент.ЗаписатьСтроку(ЭлементСтроки.Источник+"-->"+СтрЗаменить(ЭлементСтроки.Приемник, "/", "\"));
	КонецЦикла;
	ТекстовыйДокумент.Закрыть();

КонецПроцедуры

Функция ЭтоНативнаяИерархия(Знач КаталогПроверки)
    КаталогЯзыки = Новый Файл(ОбъединитьПути(КаталогПроверки, "Languages"));
    Возврат КаталогЯзыки.Существует();
КонецФункции

Процедура ОчиститьЦелевойКаталогВыгрузки(Знач КаталогИерархическойСтруктурыМодулей)

	СоответствиеИменФайловДляПропуска = Новый Соответствие;
	СоответствиеИменФайловДляПропуска.Вставить(".git", Истина);
	СоответствиеИменФайловДляПропуска.Вставить(ИмяФайлаАвторов(), Истина); //Соответствие авторов и транслитерации.
	СоответствиеИменФайловДляПропуска.Вставить(ИмяФайлаВерсииХранилища(), Истина); //Номер версии, может использоватся для синхронизации с хранилищем.

	//Удалим все каталоги с файлами в папке для разбора, кроме папки, начинающейся с с точки.
	ЕстьОшибкаУдаления = Ложь;
	Для НомерПопытки = 1 По 2 Цикл
		МассивФайлов = НайтиФайлы(КаталогИерархическойСтруктурыМодулей, ПолучитьМаскуВсеФайлы());
		Если МассивФайлов.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;

		Для Каждого ЭлементМассива Из МассивФайлов Цикл
			Если СоответствиеИменФайловДляПропуска[ЭлементМассива.Имя] = Истина Тогда
				Продолжить;
			КонецЕсли;

			Попытка
				УдалитьФайлы(ЭлементМассива.ПолноеИмя);
			Исключение
				ЕстьОшибкаУдаления = Истина;
				Если НомерПопытки = 2 Тогда
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;

		Если Не ЕстьОшибкаУдаления Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьКаталогРезультатаВыгрузки(Знач Файл, Знач КаталогИерархическойСтруктурыМодулей, Знач Переименования)
	Если Прав(Файл.Имя, 5) = "files" Тогда // файлы справки.
		МассивФайлов = НайтиФайлы(Файл.ПолноеИмя, ПолучитьМаскуВсеФайлы());
		ИмяНовогоФайла = Лев(Файл.Имя, СтрДлина(Файл.Имя)-6);
		ИмяНовогоФайла = СтрЗаменить(ИмяНовогоФайла, ".", ПолучитьРазделительПути())+".del";
		НовыйФайл = Новый Файл(ОбъединитьПути(КаталогИерархическойСтруктурыМодулей, ИмяНовогоФайла));
		НовыйКаталог = Новый Файл(НовыйФайл.Путь);
		Если НЕ НовыйКаталог.Существует() Тогда
			СоздатьКаталог(НовыйКаталог.ПолноеИмя);
		КонецЕсли;
		НовыйФайл = Новый Файл(ОбъединитьПути(НовыйКаталог.ПолноеИмя, Файл.Имя));
		Если Не НовыйФайл.Существует() Тогда
			СоздатьКаталог(НовыйФайл.ПолноеИмя);
		КонецЕсли;
		Для Каждого ЭлементЦикла Из МассивФайлов Цикл
			ДобавитьПереименование(Переименования,
				ОбъединитьПути(Файл.Имя, ЭлементЦикла.Имя),
				СтрЗаменить(ОбъединитьПути(НовыйФайл.ПолноеИмя, ЭлементЦикла.Имя), КаталогИерархическойСтруктурыМодулей+ПолучитьРазделительПути(), ""));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция СкорректироватьИмяФайлаМетаданных(Знач ИмяФайла)

	Если Прав(ИмяФайла, 12) = "Форма.Модуль" Тогда
		ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-12)+"МодульФормы";
	КонецЕсли;

	Если Прав(ИмяФайла, 6) = ".Макет" Тогда
		ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-6);
	КонецЕсли;

	Если Прав(ИмяФайла, 17) = ".Картинка.Picture" Тогда
		ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-17);
	КонецЕсли;

	Если Прав(ИмяФайла, 5) = ".Form" Тогда

	КонецЕсли;

	// Для 8.3 если файл содержит всего одну точку в имени, тогда создадим папки и туда его и кинем.
	//

	Если СтрЧислоВхождений(ИмяФайла, ".") = 1 Тогда
		//Увеличим наименование на Наименование объекта конфигурации описываемого.
		НаименованиеОбъектаМетаданных = Сред(ИмяФайла, Найти(ИмяФайла, "."));
		ИмяФайла = СтрЗаменить(ИмяФайла, НаименованиеОбъектаМетаданных,НаименованиеОбъектаМетаданных+НаименованиеОбъектаМетаданных);
	КонецЕсли;

	Возврат ИмяФайла;

КонецФункции

Процедура СократитьДлинуИмениФайла(ИмяФайла, Знач КаталогИерархическойСтруктурыМодулей)

	КэшПереименований = Новый Соответствие;
	МассивИмен = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ИмяФайла, ".");

	ИмяФайла = "";
	Счетчик = 0;
	КоличествоВсего = МассивИмен.Количество();
	Для Счетчик = 0 По КоличествоВсего-1 Цикл
		ЭлементМассива = МассивИмен.Получить(Счетчик);
		НовоеИмя = ЭлементМассива;
		ДлинаИмени = СтрДлина(ЭлементМассива);

		Если ДлинаИмени > 58 Тогда
			Лог.Отладка("Слишком длинное имя:"+ЭлементМассива +" длина:"+ДлинаИмени);

			Если КэшПереименований.Получить(ЭлементМассива) <> Неопределено Тогда
				НовоеИмя = КэшПереименований.Получить(ЭлементМассива);
			Иначе
				Разрядность = СтрДлина(Строка(ДлинаИмени));
				НовоеИмя = Лев(ЭлементМассива, 58-Разрядность-1)+"~"+ДлинаИмени;
				НовыйПутьПроверки = Новый Файл(КаталогИерархическойСтруктурыМодулей + ПолучитьРазделительПути()+ ИмяФайла + НовоеИмя);
				Если НовыйПутьПроверки.Существует() Тогда
					СчетчикНовогоИмени = 0;
					МассивФайловСущуствующих = НайтиФайлы(ОбъединитьПути(КаталогИерархическойСтруктурыМодулей, ИмяФайла), Лев(ЭлементМассива, 58-Разрядность-3)+"*");
					СчетчикНовогоИмени = МассивФайловСущуствующих.Количество()+1;
					НовоеИмя = Лев(ЭлементМассива, 58-Разрядность-3)+"~"+ДлинаИмени+ФорматДвузначноеЧисло(Строка(СчетчикНовогоИмени));
				КонецЕсли;

				КэшПереименований.Вставить(ЭлементМассива, НовоеИмя);
			КонецЕсли;

			Лог.Отладка("Старое имя:"+ЭлементМассива +" новое имя:"+НовоеИмя);
		КонецЕсли;
		ИмяФайла=ИмяФайла+НовоеИмя+ПолучитьРазделительПути();
	КонецЦикла;
	ИмяФайла = ?(Прав(ИмяФайла,1)=ПолучитьРазделительПути(), Лев(ИмяФайла, СтрДлина(ИмяФайла)-1), ИмяФайла);

КонецПроцедуры

Процедура РаспаковатьКонтейнерМетаданных(Знач ФайлРаспаковки, Знач КаталогРаспаковки)
	ФайлДляРаспаковки = Новый файл(ФайлРаспаковки);
	Если КаталогРаспаковки = "" тогда
		КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
	КонецЕсли;

	СтрокаЗапуска = """"+ФайлПрограммыРаспаковки()+""" -parse """+ФайлДляРаспаковки.ПолноеИмя+""" """+КаталогРаспаковки+"""";
	Если НЕ ЭтоWindows Тогда
		СтрокаЗапуска = "sh -c '"+СтрокаЗапуска+"'";
	КонецЕсли;
	Лог.Отладка(СтрокаЗапуска);

	ЗапуститьПриложение(СтрокаЗапуска,,Истина);

КонецПроцедуры

// Выполняет фиксацию изменений в локальном каталоге git
//
Процедура ВыполнитьКоммитГит(Знач КаталогРабочейКопии, Знач Комментарий, Знач Автор, Знач Дата=Неопределено) Экспорт

	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	ИмяФайлаКомментария = ВременныеФайлы.СоздатьФайл("txt");
	ФайлКомментария = Новый ЗаписьТекста(ИмяФайлаКомментария, КодировкаТекста.UTF8NoBOM);
	ФайлКомментария.Записать(?(ПустаяСтрока(Комментарий), ".", Комментарий));
	ФайлКомментария.Закрыть();
	Лог.Информация("Текст коммита: <"+Комментарий+">");

	КомандныйФайл = СоздатьКомандныйФайл();
	ПрефиксЭкспортаПеременной = ?(ЭтоWindows, "set", "export");
	Если ЭтоWindows Тогда
		ДобавитьВКомандныйФайл(КомандныйФайл, "cd /d " + ОбернутьВКавычки(КаталогРабочейКопии));
	Иначе
		ДобавитьВКомандныйФайл(КомандныйФайл, "cd " + ОбернутьВКавычки(КаталогРабочейКопии));
	КонецЕсли;
	ДобавитьВКомандныйФайл(КомандныйФайл, ПрефиксЭкспортаПеременной + "  GIT_AUTHOR_DATE="+ОбернутьВКавычки(ДатаPOSIX(Дата)));
	ДобавитьВКомандныйФайл(КомандныйФайл, ПрефиксЭкспортаПеременной + " GIT_COMMITTER_DATE="+ОбернутьВКавычки(ДатаPOSIX(Дата)));
	ДобавитьВКомандныйФайл(КомандныйФайл, "git add -A .");

	ИмяФайлаЛогаКоммита = ВременныеФайлы.СоздатьФайл("log");

	авторДляГит = Автор;
	Если Найти(Автор, "<") <= Найти(Автор, ">") Тогда
		авторДляГит = Автор+" <"+Автор+"@localhost>"; // e-mail может быть удобен для поиска в связанных системах //авторДляГит = Автор+" <"+Автор+">";
	КонецЕсли;

	// КомандаКоммита = "git commit -a --file="""+ИмяФайлаКомментария+""" --author="""+Автор+""" >"+ИмяФайлаЛогаКоммита;
	КомандаКоммита = "git commit -a --file="""+ИмяФайлаКомментария+""" --author="""+Автор+""" "+СуффиксПеренаправленияВывода(ИмяФайлаЛогаКоммита, Истина);
	ДобавитьВКомандныйФайл(КомандныйФайл, КомандаКоммита);
	ДобавитьВКомандныйФайл(КомандныйФайл, "exit " + ?(ЭтоWindows, "/b %ERRORLEVEL%", "$#"));

	ИмяФайлаВыполнения = ЗакрытьКомандныйФайл(КомандныйФайл);

	Если Лог.Уровень() = УровниЛога.Отладка Тогда
		текстФайла = "";
		Если ПолучитьТекстФайла(ИмяФайлаВыполнения, текстФайла) Тогда
			Лог.Отладка("ВыполнитьКоммитГит: текст файла запуска "+Символы.ВК+текстФайла);
		Иначе
			Лог.Ошибка("ВыполнитьКоммитГит: не удалось вывести текст пакетного файла");
		КонецЕсли;
	КонецЕсли;

	рез = ВыполнитьКомандныйФайл(КомандныйФайл);

	Лог.Информация("ВыполнитьКоммитГит: Вызов git commit вернул код <" + рез + "> ");

	Если рез <> 0 Тогда
		текстФайла = "";
		успешно = ПолучитьТекстФайла(ИмяФайлаЛогаКоммита, текстФайла);
		Если успешно Тогда
			Лог.Ошибка("ВыполнитьКоммитГит: Лог команды git commit"+Символы.ПС+текстФайла);
		Иначе
			Лог.Ошибка("ВыполнитьКоммитГит: Не удалось получить лог команды git commit");
		КонецЕсли;
	КонецЕсли;

	УдалитьВременныеФайлыПриНеобходимости(ИмяФайлаВыполнения);
	УдалитьВременныеФайлыПриНеобходимости(ИмяФайлаКомментария);
	УдалитьВременныеФайлыПриНеобходимости(ИмяФайлаЛогаКоммита);

	Если Рез <> 0 Тогда
		ВызватьИсключение "Коммит в git выполнить не удалось. См. лог";
	КонецЕсли;

КонецПроцедуры

// Cтандартная процедура git push
//
Функция ВыполнитьGitPush(Знач ЛокальныйРепозиторий, Знач УдаленныйРепозиторий, Знач ИмяВетки) Экспорт

	КомандныйФайл = СоздатьКомандныйФайл();
	ИмяФайлаЛогаКоммита = ВременныеФайлы.СоздатьФайл("log");
	Если ЭтоWindows Тогда
		ДобавитьВКомандныйФайл(КомандныйФайл, СтроковыеФункции.ПодставитьПараметрыВСтроку("cd /d ""%1""", ЛокальныйРепозиторий));
	Иначе
		ДобавитьВКомандныйФайл(КомандныйФайл, СтроковыеФункции.ПодставитьПараметрыВСтроку("cd ""%1""", ЛокальныйРепозиторий));
	КонецЕсли;

	ДобавитьВКомандныйФайл(КомандныйФайл, "git gc --auto");

	ПараметрыКоманды = Новый Массив;
	ПараметрыКоманды.Добавить("git push -u");
	ПараметрыКоманды.Добавить(СтрЗаменить(УдаленныйРепозиторий, "%", "%%"));
	ПараметрыКоманды.Добавить("--all -v");
	ПараметрыКоманды.Добавить(СуффиксПеренаправленияВывода(ИмяФайлаЛогаКоммита, Истина));

	СтрокаКоманды = СобратьКоманднуюСтроку(ПараметрыКоманды);
	Если Лог.Уровень() = УровниЛога.Отладка Тогда
		сообщение = "строкаКоманды = <"+?(строкаКоманды = Неопределено, "Неопределено", строкаКоманды)+">";
		Лог.Отладка(сообщение);
	КонецЕсли;

	ДобавитьВКомандныйФайл(КомандныйФайл, СтрокаКоманды);
    ДобавитьВКомандныйФайл(КомандныйФайл, "exit " + ?(ЭтоWindows, "/b %ERRORLEVEL%", "$#"));

	Результат = ВыполнитьКомандныйФайл(КомандныйФайл);
	ВывестиТекстФайла(ИмяФайлаЛогаКоммита);
	ЗавершитьПроцесс_TGitCache_exe();

	Возврат Результат;

КонецФункции

// Cтандартная процедура git pull
//
Функция ВыполнитьGitPull(Знач ЛокальныйРепозиторий, Знач УдаленныйРепозиторий, Знач ИмяВетки) Экспорт

	КомандныйФайл = СоздатьКомандныйФайл();
	ИмяФайлаЛогаКоммита = ВременныеФайлы.СоздатьФайл("log");
	Если ЭтоWindows Тогда
		ДобавитьВКомандныйФайл(КомандныйФайл, СтроковыеФункции.ПодставитьПараметрыВСтроку("cd /d ""%1""", ЛокальныйРепозиторий));
	Иначе
		ДобавитьВКомандныйФайл(КомандныйФайл, СтроковыеФункции.ПодставитьПараметрыВСтроку("cd ""%1""", ЛокальныйРепозиторий));
	КонецЕсли;

	ПараметрыКоманды = Новый Массив;
	ПараметрыКоманды.Добавить("git pull");
	ПараметрыКоманды.Добавить("-v");
	ПараметрыКоманды.Добавить(СтрЗаменить(УдаленныйРепозиторий, "%", "%%"));
	ПараметрыКоманды.Добавить(СуффиксПеренаправленияВывода(ИмяФайлаЛогаКоммита, Истина));

	СтрокаКоманды = СобратьКоманднуюСтроку(ПараметрыКоманды);
	сообщение = "строкаКоманды = <"+?(строкаКоманды = Неопределено, "Неопределено", строкаКоманды)+">";
	Лог.Отладка(сообщение);
	ДобавитьВКомандныйФайл(КомандныйФайл, СтрокаКоманды);
	ДобавитьВКомандныйФайл(КомандныйФайл, "exit " + ?(ЭтоWindows, "/b %ERRORLEVEL%", "$#"));

	Результат = ВыполнитьКомандныйФайл(КомандныйФайл);
	ВывестиТекстФайла(ИмяФайлаЛогаКоммита);

	Возврат Результат;

КонецФункции

//////////////////////////////////////////////////////////////////////////
// Работа с командными файлами

Функция СоздатьКомандныйФайл(Знач Путь = "")

	Файл = Новый КомандныйФайл();
	Файл.Открыть(Путь);

	Возврат Файл;

КонецФункции

Процедура ДобавитьВКомандныйФайл(Знач ДескрипторКомандногоФайла, Знач Команда)
	ДескрипторКомандногоФайла.Добавить(Команда);
КонецПроцедуры

Функция ВыполнитьКомандныйФайл(Знач ДескрипторКомандногоФайла)
	Возврат ДескрипторКомандногоФайла.Выполнить();
КонецФункции

Функция ЗакрытьКомандныйФайл(Знач ДескрипторКомандногоФайла)

	Путь = ДескрипторКомандногоФайла.Закрыть();
	Возврат Путь;

КонецФункции

//////////////////////////////////////////////////////////////////////////
// Работа с таблицами хранилища 1С


// Устанавливает параметры авторизации в хранилище 1С, если выгрузка версии выполняется средствами платформы
//
Процедура УстановитьАвторизациюВХранилищеКонфигурации(Знач Логин, Знач Пароль, Знач ВерсияПлатформы = "")

	мАвторизацияВХранилищеСредствами1С = Новый Структура;
	мАвторизацияВХранилищеСредствами1С.Вставить("Логин" , Логин);
	мАвторизацияВХранилищеСредствами1С.Вставить("Пароль", Пароль);
	мАвторизацияВХранилищеСредствами1С.Вставить("ВерсияПлатформы", ВерсияПлатформы);

КонецПроцедуры

// Выполняет чтение таблицы VERSIONS из хранилища 1С
//
// Возвращаемое значение: ТаблицаЗначений
//
Функция ПрочитатьТаблицуИсторииХранилища(Знач ФайлХранилища) Экспорт

	ЧтениеБазыДанных = Новый ЧтениеТаблицФайловойБазыДанных;
	ЧтениеБазыДанных.ОткрытьФайл(ФайлХранилища);
	Попытка
		ТаблицаБД = ЧтениеБазыДанных.ПрочитатьТаблицу("VERSIONS");
	Исключение
		ЧтениеБазыДанных.ЗакрытьФайл();
		ВызватьИсключение;
	КонецПопытки;

	ЧтениеБазыДанных.ЗакрытьФайл();

	ТаблицаВерсий = КонвертироватьТаблицуВерсийИзФорматаБД(ТаблицаБД);
	ТаблицаВерсий.Сортировать("НомерВерсии");

	Возврат ТаблицаВерсий;

КонецФункции

// Считывает таблицу USERS пользователей хранилища
//
Функция ПрочитатьТаблицуПользователейХранилища(Знач ФайлХранилища) Экспорт

	ЧтениеБазыДанных = Новый ЧтениеТаблицФайловойБазыДанных;
	ЧтениеБазыДанных.ОткрытьФайл(ФайлХранилища);
	Попытка
		ТаблицаБД = ЧтениеБазыДанных.ПрочитатьТаблицу("USERS");
	Исключение
		ЧтениеБазыДанных.ЗакрытьФайл();
		ВызватьИсключение;
	КонецПопытки;

	ЧтениеБазыДанных.ЗакрытьФайл();

	Возврат КонвертироватьТаблицуПользователейИзФорматаБД(ТаблицаБД);

КонецФункции

// Считывает из хранилища историю коммитов с привязкой к пользователям
//
Функция ПрочитатьИзХранилищаИсториюКоммитовСАвторами(Знач ФайлХранилища) Экспорт

	Перем ТаблицаВерсий;
	Перем ТаблицаПользователей;

	ЧтениеБазыДанных = Новый ЧтениеТаблицФайловойБазыДанных;
	ЧтениеБазыДанных.ОткрытьФайл(ФайлХранилища);
	Попытка
		Таблицы = ЧтениеБазыДанных.ВыгрузитьТаблицыВXML("USERS;VERSIONS");
		ТаблицаВерсий        = ЧтениеБазыДанных.ПрочитатьТаблицуИзXml(Таблицы["VERSIONS"]);
		ТаблицаПользователей = ЧтениеБазыДанных.ПрочитатьТаблицуИзXml(Таблицы["USERS"]);
	Исключение
		ЧтениеБазыДанных.ЗакрытьФайл();
		ВызватьИсключение;
	КонецПопытки;

	ЧтениеБазыДанных.ЗакрытьФайл();

	ТаблицаВерсий = КонвертироватьТаблицуВерсийИзФорматаБД(ТаблицаВерсий);
	ТаблицаПользователей = КонвертироватьТаблицуПользователейИзФорматаБД(ТаблицаПользователей);

	ДополнитьТаблицуВерсийИменамиАвторов(ТаблицаВерсий, ТаблицаПользователей);
	ТаблицаВерсий.Сортировать("НомерВерсии");

	Возврат ТаблицаВерсий;

КонецФункции

// Прописывает в таблицы пользователей и версий информацию о git auth вида user <user@email.com>
//
Процедура ДополнитьТаблицуХранилищаИнформациейОСигнатуреПользователяВГит(Знач ТаблицаХранилища, Знач КаталогРепо) Экспорт

	ПутьКФайлуСопоставления = ОбъединитьПути(КаталогРепо, ИмяФайлаАвторов());
	Файл = Новый Файл(ПутьКФайлуСопоставления);
	ТаблицаСопоставления = ПрочитатьФайлАвторовГитВТаблицуПользователей(ОбъединитьПути(КаталогРепо, ИмяФайлаАвторов()));

	Для Каждого Строка Из ТаблицаХранилища Цикл

		СтрокаПользователя = ТаблицаСопоставления.Найти(строка.Автор, "Автор");
		Если СтрокаПользователя = Неопределено Тогда
			СтрокаСообщения = "Пользователю хранилища <%1> не сопоставлен пользователь git. Использую сопоставление по умолчанию";
			Лог.Отладка(СтроковыеФункции.ПодставитьПараметрыВСтроку(СтрокаСообщения, строка.Автор));
			ПредставлениеАвтора = СтроковыеФункции.ПодставитьПараметрыВСтроку("%1 <%1@%2>", строка.Автор, Строка(ДоменПочтыДляGit()));
		Иначе
			ПредставлениеАвтора = строкаПользователя.ПредставлениеАвтора;
		КонецЕсли;

		Строка.ПредставлениеАвтора = ПредставлениеАвтора;

	КонецЦикла;

КонецПроцедуры

Функция КонвертироватьТаблицуВерсийИзФорматаБД(Знач ТаблицаБД)

	ТаблицаВерсий = НоваяТаблицаИсторииВерсий();

	Для Каждого СтрокаБД Из ТаблицаБД Цикл

		НоваяСтрока = ТаблицаВерсий.Добавить();
		НоваяСтрока.НомерВерсии = Число(СтрокаБД.VERNUM);
		НоваяСтрока.ГУИД_Автора = СтрокаБД.USERID;
		НоваяСтрока.Тэг = СтрокаБД.CODE;

		Дата = СтрЗаменить(СтрЗаменить(СтрокаБД.VERDATE, "-", ""), ":", "");
		Дата = СтрЗаменить(Дата, "T", "");
		Дата = Дата(Дата);
		НоваяСтрока.Дата = Дата;
		НоваяСтрока.Комментарий = СтрокаБД.COMMENT;

	КонецЦикла;

	Возврат ТаблицаВерсий;
КонецФункции

Функция КонвертироватьТаблицуПользователейИзФорматаБД(Знач ТаблицаБД)
	ТаблицаПользователей = НоваяТаблицаПользователейХранилища();

	Для Каждого СтрокаБД Из ТаблицаБД Цикл

		НоваяСтрока = ТаблицаПользователей.Добавить();
		НоваяСтрока.Автор       = СтрокаБД.NAME;
		НоваяСтрока.ГУИД_Автора = СтрокаБД.USERID;

	КонецЦикла;

	Возврат ТаблицаПользователей;

КонецФункции

Функция НоваяТаблицаИсторииВерсий()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерВерсии");
	Таблица.Колонки.Добавить("ГУИД_Автора");
	Таблица.Колонки.Добавить("Автор");
	Таблица.Колонки.Добавить("Тэг");
	Таблица.Колонки.Добавить("Дата");
	Таблица.Колонки.Добавить("Комментарий");
	Таблица.Колонки.Добавить("ПредставлениеАвтора");

	Возврат Таблица;

КонецФункции

Функция НоваяТаблицаПользователейХранилища()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Автор");
	Таблица.Колонки.Добавить("ГУИД_Автора");
	Таблица.Колонки.Добавить("ПредставлениеАвтора");

	Возврат Таблица;

КонецФункции

Процедура ДополнитьТаблицуВерсийИменамиАвторов(Знач ТаблицаВерсий, Знач ТаблицаПользователей)

	Для Каждого Строка Из ТаблицаВерсий Цикл
		строкаПользователя = ТаблицаПользователей.Найти(Строка.ГУИД_Автора, "ГУИД_Автора");
		Если строкаПользователя = Неопределено Тогда
			Сообщение = "Не удалось найти автора коммита из хранилища 1С по номеру версии <%1>, комментарий <%2>, ГУИД-у <%3> - ПолучитьТаблицуВерсийИзФайлаХранилища1С";
			Лог.Ошибка(СтроковыеФункции.ПодставитьПараметрыВСтроку(Сообщение, строка.НомерВерсии, строка.Комментарий, строка.ГУИД_Автора));
		Иначе
			строка.Автор = строкаПользователя.Автор;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Генерирует файл соответствия пользователей хранилища 1С и git
//
Процедура СформироватьПервичныйФайлПользователейДляGit(Знач ИмяФайлаХранилища, Знач ВыходнойФайл) Экспорт

	резПутьКХМЛФайлуВерсийХранилища1С = "";
	резПутьКХМЛФайлуПользователейХранилища1С = "";

	Лог.Отладка("Формируем первичный файл авторов:
	| Файл хранилища: " + ИмяФайлаХранилища + "
	| Выходной файл: " + ВыходнойФайл);

	ТаблицаПользователейХранилища = ПрочитатьТаблицуПользователейХранилища(ИмяФайлаХранилища);

	ЗаписатьТаблицуПользователейВФайлАвторовGit(ТаблицаПользователейХранилища, ВыходнойФайл, ДоменПочтыДляGit());

КонецПроцедуры

Процедура ЗаписатьТаблицуПользователейВФайлАвторовGit(Знач ТаблицаПользователейХранилища, Знач ВыходнойФайл, Знач ДоменПочтыДляGit)

	ЗаписьФайла = Новый ЗаписьТекста(ВыходнойФайл, "utf-8");
	Попытка
		ШаблонЗаписи = "%1=%1 <%1@%2>";
		Для Каждого Запись Из ТаблицаПользователейХранилища Цикл
			СтрокаДляЗаписи = СтроковыеФункции.ПодставитьПараметрыВСтроку(ШаблонЗаписи, Запись.Автор, ДоменПочтыДляGit);
			ЗаписьФайла.ЗаписатьСтроку(СтрокаДляЗаписи);
		КонецЦикла;

		ЗаписьФайла.Закрыть();
	Исключение
		ОсвободитьОбъект(ЗаписьФайла);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Выполняет клонирование удаленного репо
//
Функция КлонироватьРепозитарий(Знач КаталогЛокальнойКопии, Знач URLРепозитария) Экспорт

	Батник = СоздатьКомандныйФайл();
	Если ЭтоWindows Тогда
		ДобавитьВКомандныйФайл(Батник, СтроковыеФункции.ПодставитьПараметрыВСтроку("cd /d ""%1""", КаталогЛокальнойКопии));
	Иначе
		ДобавитьВКомандныйФайл(Батник, СтроковыеФункции.ПодставитьПараметрыВСтроку("cd ""%1""", КаталогЛокальнойКопии));
	КонецЕсли;
	ФайлЛога = ВременныеФайлы.СоздатьФайл("log");
	ПараметрыКоманды = Новый Массив;
	ПараметрыКоманды.Добавить("git clone");
	ПараметрыКоманды.Добавить(URLРепозитария);
	ПараметрыКоманды.Добавить(ОбернутьВКавычки(КаталогЛокальнойКопии));
	ПараметрыКоманды.Добавить(СуффиксПеренаправленияВывода(ФайлЛога, Истина));

	КоманднаяСтрока = СобратьКоманднуюСтроку(ПараметрыКоманды);
	Лог.Отладка(КоманднаяСтрока);
	ДобавитьВКомандныйФайл(Батник, КоманднаяСтрока);
	ДобавитьВКомандныйФайл(Батник, "exit " + ?(ЭтоWindows, "/b %ERRORLEVEL%", "$#"));

	РезультатКлонирования = ВыполнитьКомандныйФайл(Батник);

	ВывестиТекстФайла(ФайлЛога);
	УдалитьВременныеФайлыПриНеобходимости(ФайлЛога);
	Возврат РезультатКлонирования;

КонецФункции

// Выполняет инициализацию репо
//
Функция ИнициализироватьРепозитарий(Знач КаталогЛокальнойКопии) Экспорт

	Батник = СоздатьКомандныйФайл();
	Лог.Отладка(КаталогЛокальнойКопии);
	ДопСтрокаПерехода = ?(ЭтоWindows, "/d", "");
	ДобавитьВКомандныйФайл(Батник, СтроковыеФункции.ПодставитьПараметрыВСтроку("cd %2 ""%1""", КаталогЛокальнойКопии, ДопСтрокаПерехода));
	ФайлЛога = ВременныеФайлы.СоздатьФайл("log");
	ПараметрыКоманды = Новый Массив;
	ПараметрыКоманды.Добавить("git init");
	ПараметрыКоманды.Добавить(СуффиксПеренаправленияВывода(ФайлЛога, Истина));

	КоманднаяСтрока = СобратьКоманднуюСтроку(ПараметрыКоманды);
	Лог.Отладка(КоманднаяСтрока);
	ДобавитьВКомандныйФайл(Батник, КоманднаяСтрока);
	ДобавитьВКомандныйФайл(Батник, "exit " + ?(ЭтоWindows, "/b %ERRORLEVEL%", "$#"));

	Результат = ВыполнитьКомандныйФайл(Батник);

	ВывестиТекстФайла(ФайлЛога);
	УдалитьВременныеФайлыПриНеобходимости(ФайлЛога);
	Возврат Результат;

КонецФункции

// Возвращает Истина, если каталог является каталогом или подкаталогом гит-репозитория, иначе возвращается Ложь.
//
Функция ПроверитьНаличиеРепозитарияГит(Знач КаталогЛокальнойКопии) Экспорт
	Батник = СоздатьКомандныйФайл();
	Лог.Отладка(КаталогЛокальнойКопии);
	
	ДопСтрокаПерехода = ?(ЭтоWindows, "/d", "");
	ДобавитьВКомандныйФайл(Батник, СтрШаблон("cd %2 ""%1""", КаталогЛокальнойКопии, ДопСтрокаПерехода));
	ФайлЛога = ВременныеФайлы.СоздатьФайл("log");
	
	ПараметрыКоманды = Новый Массив;
	ПараметрыКоманды.Добавить("git status");
	ПараметрыКоманды.Добавить(СуффиксПеренаправленияВывода(ФайлЛога, Истина));

	КоманднаяСтрока = СобратьКоманднуюСтроку(ПараметрыКоманды);
	Лог.Отладка(КоманднаяСтрока);
	ДобавитьВКомандныйФайл(Батник, КоманднаяСтрока);
	ДобавитьВКомандныйФайл(Батник, "exit " + ?(ЭтоWindows, "/b %ERRORLEVEL%", "$#"));

	КодВозврата = ВыполнитьКомандныйФайл(Батник);

	ВывестиТекстФайла(ФайлЛога);
	УдалитьВременныеФайлыПриНеобходимости(ФайлЛога);
	
	Возврат КодВозврата = 0;
КонецФункции // ПроверитьНаличиеРепозитарияГит(Знач Каталог) Экспорт

// Определяет необходимость синхронизации хранилища и репо GIT.
//
Функция ТребуетсяСинхронизироватьХранилищеСГит(Знач ФайлХранилища, Знач ЛокальныйКаталогГит) Экспорт

	ТаблицаВерсий = ПрочитатьТаблицуИсторииХранилища(ФайлХранилища);
	ТекущаяВерсия = НомерСинхронизированнойВерсии(ЛокальныйКаталогГит);
	МаксимальнаяВерсияДляРазбора = ОпределитьМаксимальнуюВерсиюВХранилище(ТаблицаВерсий);

	Лог.Информация("Номер синхронизированной версии: " + ТекущаяВерсия);
	Лог.Информация("Номер последней версии в хранилище: " + МаксимальнаяВерсияДляРазбора);

	Возврат ТекущаяВерсия < МаксимальнаяВерсияДляРазбора;

КонецФункции

// Основная функция синхронизации. Перемещает в git набор коммитов хранилища 1С
//
Процедура СинхронизироватьХранилищеКонфигурацийСГит(Знач КаталогРабочейКопии, 
		Знач ФайлХранилища, 
		Знач НачальнаяВерсия = 0, 
		Знач КонечнаяВерсия = 0, 
		Знач Формат = Неопределено, 
		Знач КоличествоКоммитовДоPush = 0,
		Знач URLРепозитория = Неопределено,
		Знач ИмяВетки = Неопределено) Экспорт

	Лог.Информация("Начало синхронизации с git");
	ТаблицаИсторииХранилища = ПрочитатьИзХранилищаИсториюКоммитовСАвторами(ФайлХранилища);
	ДополнитьТаблицуХранилищаИнформациейОСигнатуреПользователяВГит(ТаблицаИсторииХранилища, КаталогРабочейКопии);
	ТекущаяВерсия = НомерСинхронизированнойВерсии(КаталогРабочейКопии);
	Лог.Информация("Номер синхронизированной версии: " + ТекущаяВерсия);
	СледующаяВерсия = ТекущаяВерсия + 1;

	Если Формат = Неопределено Тогда
		Формат = РежимВыгрузкиФайлов.Авто;
	КонецЕсли;

	Лог.Отладка("Используется формат выгрузки " + Формат);

	МаксимальнаяВерсияДляРазбора = ОпределитьМаксимальнуюВерсиюСУчетомОграниченияСверху(ТаблицаИсторииХранилища, ТекущаяВерсия, КонечнаяВерсия);
	Лог.Информация("Номер последней версии в хранилище: " + МаксимальнаяВерсияДляРазбора);
	ИспользоватьПромежуточныйPUSH = КоличествоКоммитовДоPush > 0;
	Если ИмяВетки = Неопределено Тогда
		ИмяВетки = "master"
	КонецЕсли;
	
	СчетчикКоммитов = 0;
	Пока СледующаяВерсия <= МаксимальнаяВерсияДляРазбора Цикл
				
		СтрокаВерсии = ТаблицаИсторииХранилища.Найти(СледующаяВерсия, "НомерВерсии");
		Если СтрокаВерсии <> Неопределено Тогда

			Если ПустаяСтрока(СтрокаВерсии.ПредставлениеАвтора) Тогда
				ВызватьИсключение "Нашли следующую версию, а автор не прописан "+СледующаяВерсия + " автор "+СтрокаВерсии.Автор;
			КонецЕсли;

			Лог.Отладка("Фиксируем в файле VERSION версию " + СледующаяВерсия);
			ЗаписатьФайлВерсийГит(КаталогРабочейКопии, СледующаяВерсия);
			Попытка
				Лог.Информация("Получаем исходники для версии " + СледующаяВерсия);

				РазложитьМодулиПоНомеруВерсииХранилища1С(КаталогРабочейКопии, ФайлХранилища, СледующаяВерсия, Формат);
				ВыполнитьКоммитГит(КаталогРабочейКопии, СтрокаВерсии.Комментарий, СтрокаВерсии.ПредставлениеАвтора, СтрокаВерсии.Дата);
				СчетчикКоммитов = СчетчикКоммитов + 1;

				Если ИспользоватьПромежуточныйPUSH И
					СчетчикКоммитов = КоличествоКоммитовДоPush Тогда
					СчетчикКоммитов = 0;
					ВыполнитьGitPush(КаталогРабочейКопии, URLРепозитория, ИмяВетки)
				КонецЕсли;


			Исключение
				Лог.Отладка("Откатываем файл VERSION после ошибки");
				ЗаписатьФайлВерсийГит(КаталогРабочейКопии, ТекущаяВерсия);
				ВызватьИсключение;
			КонецПопытки;

			ТекущаяВерсия = СледующаяВерсия;
		КонецЕсли;

		СледующаяВерсия = СледующаяВерсия + 1;

	КонецЦикла;

	ЗавершитьПроцесс_TGitCache_exe();

КонецПроцедуры

Функция ОпределитьМаксимальнуюВерсиюСУчетомОграниченияСверху(Знач ТаблицаИсторииХранилища, Знач ТекущаяВерсия, Знач МаксимальнаяВерсия)

	МаксимальнаяВерсияДляРазбора = 0;
	ЧислоВерсийПлюс = 0;

	Если МаксимальнаяВерсия <> 0 Тогда
		Попытка
			ЧислоВерсийПлюс = Число(МаксимальнаяВерсия);
		Исключение
			ЧислоВерсийПлюс = 0;
		КонецПопытки;
	КонецЕсли;

	Если ЧислоВерсийПлюс>0 Тогда
		МаксимальнаяВерсияДляРазбора = ТекущаяВерсия + ЧислоВерсийПлюс;
	Иначе
		МаксимальнаяВерсияДляРазбора = ОпределитьМаксимальнуюВерсиюВХранилище(ТаблицаИсторииХранилища);
	КонецЕсли;

	Возврат МаксимальнаяВерсияДляРазбора;

КонецФункции

Функция НомерСинхронизированнойВерсии(Знач КаталогВыгрузки)

	ПутьФайлаВерсий = ОбъединитьПути(КаталогВыгрузки, ИмяФайлаВерсииХранилища());

	ТекущаяВерсия = ПрочитатьФайлВерсийГит(ПутьФайлаВерсий);
	Если ТекущаяВерсия <> Неопределено Тогда
		Попытка
			ТекущаяВерсия=Число(ТекущаяВерсия);
		Исключение
			ТекущаяВерсия = 0;
		КонецПопытки;
	Иначе
		ТекущаяВерсия = 0;
	КонецЕсли;

	Возврат ТекущаяВерсия;

КонецФункции

Функция ОпределитьМаксимальнуюВерсиюВХранилище(Знач ТаблицаИсторииХранилища)

	Если ТаблицаИсторииХранилища.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;

	МаксимальнаяВерсия = Число(ТаблицаИсторииХранилища[0].НомерВерсии);
	Для Сч = 1 По ТаблицаИсторииХранилища.Количество()-1 Цикл
		ЧислоВерсии = Число(ТаблицаИсторииХранилища[Сч].НомерВерсии);
		Если ЧислоВерсии > МаксимальнаяВерсия Тогда
			МаксимальнаяВерсия = ЧислоВерсии;
		КонецЕсли;
	КонецЦикла;

	Возврат МаксимальнаяВерсия;

КонецФункции

Процедура РазложитьМодулиПоНомеруВерсииХранилища1С(Знач КаталогРабочейКопии, Знач ФайлХранилища, Знач НомерВерсии, Знач Формат)

	ФайлХранилища = Новый Файл(ФайлХранилища);
	Если ФайлХранилища.Существует() И ФайлХранилища.ЭтоФайл() И ВРег(ФайлХранилища.Расширение) = ".1CD" Тогда
		ВремКаталог = ВременныеФайлы.СоздатьКаталог();
		ФайлВерсии  = ИмяФайлаВыгрузкиВерсииХранилища(ВремКаталог, НомерВерсии);
		Лог.Отладка("Выгружаем версию хранилища в файл " + ФайлВерсии);
		Попытка
			ПоНомеруВерсииСохранитьКонфигурациюСредствамиTool1CD(ФайлХранилища.ПолноеИмя, ФайлВерсии, НомерВерсии);
			РазобратьФайлКонфигурации(ФайлВерсии, КаталогРабочейКопии, Формат);
		Исключение
			УдалитьВременныеФайлыПриНеобходимости(ВремКаталог);
			ВызватьИсключение;
		КонецПопытки;

		УдалитьВременныеФайлыПриНеобходимости(ВремКаталог);
	Иначе
		// TODO: предусмотреть выгрузку версии штатным запуском команды Конфигуратора
		ВызватьИсключение "Некорректное имя файла хранилища: " + ФайлХранилища.ПолноеИмя;
	КонецЕсли;

КонецПроцедуры

Процедура ПоНомеруВерсииСохранитьКонфигурациюСредствамиTool1CD(Знач ПутьКФайлуХранилища1С, Знач ВыходнойФайл, Знач НомерВерсииХранилища)

	Логирование.ПолучитьЛог("oscript.lib.tool1cd").УстановитьУровень(Лог.Уровень());
	Лог.Отладка("Получаем файл версии <"+НомерВерсииХранилища+"> из хранилища: " + ПутьКФайлуХранилища1С);
	ЧтениеХранилища = Новый ЧтениеХранилищаКонфигурации;
	ЧтениеХранилища.ВыгрузитьВерсиюКонфигурации(ПутьКФайлуХранилища1С, ВыходнойФайл, НомерВерсииХранилища);
	Лог.Отладка("Версия хранилища выгружена");

КонецПроцедуры

Функция ИмяФайлаВыгрузкиВерсииХранилища(Знач Каталог, Знач НомерВерсии)
	Возврат ОбъединитьПути(Каталог,  "v"+Строка(НомерВерсии) +".cf");
КонецФункции

Процедура ВывестиТекстФайла(Знач ИмяФайла, Знач Кодировка = Неопределено)

	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Возврат;
	КонецЕсли;

	Если Кодировка = Неопределено Тогда
		Кодировка = "utf-8";
	КонецЕсли;

	ЧТ = Новый ЧтениеТекста(ИмяФайла, Кодировка);
	СтрокаФайла = ЧТ.Прочитать();
	ЧТ.Закрыть();

	Лог.Информация(СтрокаФайла);

КонецПроцедуры

Функция СуффиксПеренаправленияВывода(Знач ИмяФайлаПриемника, Знач УчитыватьStdErr = Истина)
	Возврат "> """ + ИмяФайлаПриемника + """" + ?(УчитыватьStdErr, " 2>&1", "");
КонецФункции

Функция СобратьКоманднуюСтроку(Знач ПереченьПараметров)

	СтрокаЗапуска = "";
	Для Каждого Параметр Из ПереченьПараметров Цикл

		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;

	КонецЦикла;

	Возврат СтрокаЗапуска;

КонецФункции

Функция ПолучитьТекстФайла(ИмяФайла, резТекстФайла = "")

	// проверим есть ли файл
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Лог.Информация("Файл не существует."+ИмяФайла);
		Возврат Ложь;
	КонецЕсли;

	ФайлОтчета = Новый ЧтениеТекста(ИмяФайла);
	МассивСтрок = Новый Массив;

	Попытка
		Стр = "";
		Пока Стр <> Неопределено Цикл
			Стр = ФайлОтчета.ПрочитатьСтроку();
			МассивСтрок.Добавить(Стр);
		КонецЦикла;
		ФайлОтчета.Закрыть();
	Исключение
		Лог.Ошибка("При выводе файла возникла ошибка: "+ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	Если МассивСтрок.Количество() = 0 Тогда
		Лог.Информация("Файл пуст."+ИмяФайла);
		Возврат Ложь;
	КонецЕсли;

	Лог.Отладка("В файле найдено <"+МассивСтрок.Количество()+"> строк."+ИмяФайла);
	// вывести если строки не нашлись
	текстФайла = "+---/ "+ИмяФайла+" /-------------------------------";
	Для Инд = 0 По МассивСтрок.Количество()-1 Цикл
		текстФайла = текстФайла + Символы.ПС + "|"+МассивСтрок[Инд];
	КонецЦикла;
	текстФайла = текстФайла + Символы.ПС + "+-------------";
	резТекстФайла = текстФайла;

	Возврат Истина;
КонецФункции

Функция ОбернутьВКавычки(Знач Строка);
	Возврат """" + Строка + """";
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////
// Общие функции


Функция ФайлПрограммыРаспаковки()

	Если мФайлПрограммыРаспаковки = Неопределено Тогда
		Если ЭтоWindows Тогда
			КаталогДвоичныхФайлов = ОбъединитьПути(ТекущийСценарий().Каталог, "..\..\..\bin");
			ФайлПрограммы = Новый Файл(ОбъединитьПути(КаталогДвоичныхФайлов, "v8unpack.exe"));
			Если Не ФайлПрограммы.Существует() Тогда
				ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Не обнаружен файл программы распаковки: <%1>", ФайлПрограммы.ПолноеИмя);
			КонецЕсли;

			ФайлZLib = Новый Файл(ОбъединитьПути(КаталогДвоичныхФайлов, "zlib1.dll"));
			Если Не ФайлZLib.Существует() Тогда
				ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Не обнаружена библиотека zlib1: <%1>", ФайлZLib.ПолноеИмя);
			КонецЕсли;
			мФайлПрограммыРаспаковки = ФайлПрограммы.ПолноеИмя;
		Иначе
			мФайлПрограммыРаспаковки = "v8unpack"; //установка происходит из репозитариев, поэтому уже в переменной path
		КонецЕсли;

	КонецЕсли;

	Возврат мФайлПрограммыРаспаковки;

КонецФункции

Функция ИмяФайлаАвторов() Экспорт
	Возврат "AUTHORS";
КонецФункции

Функция ИмяФайлаВерсииХранилища() Экспорт
	Возврат "VERSION"
КонецФункции

Процедура ЗаписатьФайлВерсийГит(Знач КаталогФайлаВерсий, Знач Версия = "") Экспорт

	ПутьКФайлуВерсий = ОбъединитьПути(КаталогФайлаВерсий, ИмяФайлаВерсииХранилища());
	Лог.Отладка("ПутьКФайлуВерсий =<"+ПутьКФайлуВерсий+">");
	Попытка
		Запись = Новый ЗаписьТекста(ПутьКФайлуВерсий, "utf-8");
		Запись.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""UTF-8""?>");
		Запись.ЗаписатьСтроку("<VERSION>" + Версия + "</VERSION>");
		Запись.Закрыть();
	Исключение
		Если Запись <> Неопределено Тогда
			ОсвободитьОбъект(Запись);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Функция ПрочитатьФайлВерсийГит(Знач ПутьКФайлуВерсий)

	Перем Версия;

	Если Не Новый Файл(ПутьКФайлуВерсий).Существует() Тогда
		ВызватьИсключение "Файл с версией ГИТ <"+ПутьКФайлуВерсий+"> не существует";
	КонецЕсли;

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуВерсий);

	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "VERSION" Тогда

			Если Не ЧтениеXML.Прочитать() Тогда
				ВызватьИсключение "Чтение файла версий, у элемента Version нет текста";
			КонецЕсли;

			Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				ВызватьИсключение "Чтение файла версий, у элемента Version нет текста";
			КонецЕсли;

			Версия = ЧтениеXML.Значение;
			Лог.Отладка("Предыдущая версия из хранилища 1С: "+Версия);

			лРезультат = Истина;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	ЧтениеXML.Закрыть();

	Возврат Версия;

КонецФункции

Функция ДобавитьПереименование(Знач Переименования, Знач Источник, Знач Приемник)

	СтрокаПереименования = Переименования.Добавить();
	СтрокаПереименования.Источник = Источник;
	СтрокаПереименования.Приемник = Приемник;

	Возврат СтрокаПереименования;

КонецФункции

Функция ПрочитатьФайлАвторовГитВТаблицуПользователей(Знач ПутьКФайлуАвторов) Экспорт

	Если НЕ ЗначениеЗаполнено(ПутьКФайлуАвторов) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Файл = Новый Файл(ПутьКФайлуАвторов);
	Если Не Файл.Существует() Тогда
		Возврат НоваяТаблицаПользователейХранилища();
	КонецЕсли;

	Пользователи = НоваяТаблицаПользователейХранилища();

	Попытка
		ТекстовыйФайл = Новый ЧтениеТекста(ПутьКФайлуАвторов,"utf-8");
		СтрокаФайла = "";
		Пока СтрокаФайла <> Неопределено Цикл
			СтрокаФайла = ТекстовыйФайл.ПрочитатьСтроку();
			Индекс = Найти(СтрокаФайла, "=");
			Если Индекс > 0 Тогда

				Ключ = Лев(СтрокаФайла, Индекс-1);
				АвторПредставление = Сред(СтрокаФайла, Индекс+1);

				НоваяСтрока = Пользователи.Добавить();
				НоваяСтрока.ПредставлениеАвтора = АвторПредставление;
				НоваяСтрока.Автор = Ключ;
			КонецЕсли;
		КонецЦикла;

	Исключение
		Если ТекстовыйФайл <> Неопределено Тогда
			ОсвободитьОбъект(ТекстовыйФайл);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;

	Если ТекстовыйФайл <> Неопределено Тогда
		ОсвободитьОбъект(ТекстовыйФайл);
	КонецЕсли;

	Возврат Пользователи;

КонецФункции

Процедура УстановитьРежимУдаленияВременныхФайлов(ПарамУдалятьВременныеФайлы) Экспорт
	УдалятьВременныеФайлы = ПарамУдалятьВременныеФайлы;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// Вспомогательные функции

Процедура УдалитьВременныеФайлыПриНеобходимости(Знач ПутьКФайлу = "")

	Если УдалятьВременныеФайлы Тогда
		Возврат;
	КонецЕсли;

	Если ПутьКФайлу = "" Тогда
		ВременныеФайлы.Удалить();
	Иначе
		ВременныеФайлы.УдалитьФайл(ПутьКФайлу);
	КонецЕсли;

КонецПроцедуры

Функция ДатаPOSIX(Знач Дата)

	Возврат "" + Год(Дата) + "-" + ФорматДвузначноеЧисло(Месяц(Дата)) + "-" + ФорматДвузначноеЧисло(День(Дата)) + " "
			+ ФорматДвузначноеЧисло(Час(Дата)) + ":" + ФорматДвузначноеЧисло(Минута(Дата)) + ":" + ФорматДвузначноеЧисло(Секунда(Дата));

КонецФункции

Процедура ДополнитьМассив(Знач Приемник, Знач Источник)

	Для Каждого Элемент Из Источник Цикл
		Приемник.Добавить(Элемент);
	КонецЦикла;

КонецПроцедуры

Процедура УбедитьсяЧтоФайлИлиКаталогСуществует(Знач Путь)

	Файл = Новый Файл(Путь);
	Если Не Файл.Существует() Тогда
		ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Файл <%1> должен существовать", Путь);
	КонецЕсли;

КонецПроцедуры

Функция ЗапуститьПриложениеИДождатьсяЗавершения(Знач СтрокаЗапуска, Знач ТекущийКаталог = "\.")

	рез = -1;
	Если НЕ ЭтоWindows И ТекущийКаталог = "\." Тогда
		ТекущийКаталог = "./";
	КонецЕсли;

	Попытка
		КодВозврата = "";
		ЗапуститьПриложение(СтрокаЗапуска, ТекущийКаталог, Истина, КодВозврата);
		рез = КодВозврата;
	Исключение
		// Для x64 ОС
		Если ЭтоWindows Тогда
			СтрокаЗапуска = "%windir%\Sysnative\" + СтрокаЗапуска;
			КодВозврата = "";
			ЗапуститьПриложение(СтрокаЗапуска, ТекущийКаталог, Истина, КодВозврата);
			рез = КодВозврата;
		КонецЕсли;
	КонецПопытки;

	Возврат рез;

КонецФункции // ЗапуститьПриложениеИДождатьсяЗавершения()

Процедура ЗавершитьПроцесс_TGitCache_exe()
	Если ЭтоWindows Тогда
		СтрокаКоманды = "taskkill /im TGitCache.exe  /T /F";
		Лог.Отладка("ЗавершитьПроцесс_TGitCache_exe: команда "+ СтрокаКоманды);

		ЗапуститьПриложениеИДождатьсяЗавершения(СтрокаКоманды);
	КонецЕсли;
КонецПроцедуры

Функция ФорматДвузначноеЧисло(ЗначениеЧисло)
	С = Строка(ЗначениеЧисло);
	Если СтрДлина(С) < 2 Тогда
		С = "0" + С;
	КонецЕсли;

	Возврат С;
КонецФункции

Функция ДоменПочтыДляGit()
	Возврат ?(ДоменПочтыДляGitПоУмолчанию = Неопределено, "localhost", ДоменПочтыДляGitПоУмолчанию);
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////
СистемнаяИнформация = Новый СистемнаяИнформация;
ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;

Лог = Логирование.ПолучитьЛог("oscript.app.gitsync");
ДоменПочтыДляGitПоУмолчанию = "localhost";
УдалятьВременныеФайлы=Ложь;
