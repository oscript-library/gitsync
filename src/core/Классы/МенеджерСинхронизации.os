///////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль основан на проекте v83unpack (https://github.com/xDrivenDevelopment/v83unpack)
// и является скорее глубоким рефакторингом под 1Script, нежели самостоятельной разработкой.
//
// Использует также утилиту Tool_1CD от awa (http://infostart.ru/public/19633/)
//
///////////////////////////////////////////////////////////////////////////////////////////////

#Использовать tool1cd
#Использовать logos
#Использовать tempfiles
#Использовать v8runner
#Использовать strings
#Использовать 1commands
#Использовать v8unpack
#Использовать gitrunner
#Использовать fs

Перем Лог;
Перем мФайлПрограммыРаспаковки;
Перем ЭтоWindows;
Перем УдалятьВременныеФайлы;
Перем КоличествоЦикловОжиданияЛицензииПоУмолчанию;

Перем РабочийКаталогСохр;
Перем ГитРепозиторийСохр;
// Определяем мин количество коммитов между разницей версии уже в git и в хранилище
// для случаев, когда пересоздали хранилище и в гите находится версия 1234, а в хранилище 4,
// тогда вызываем исключение если разница в коммитах больше чем на эту велечину. 
Перем МинимальнаяРазницаМеждуКоммитамиНовогоХранилища;
Перем Плагины;
///////////////////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Перем ДоменПочтыДляGitПоУмолчанию Экспорт;
Перем ВерсияПлатформы Экспорт;

// Основная функция синхронизации. 
// Перемещает в git набор коммитов хранилища 1С
//
Процедура СинхронизироватьХранилищеКонфигурацийСГит(Знач КаталогРабочейКопии, 
													Знач ПутьКХранилищу, 
													Знач Формат = Неопределено, 
													Знач URLРепозитория = Неопределено,
													Знач ИмяВетки = Неопределено) Экспорт


	Если Формат = Неопределено Тогда
		Формат = РежимВыгрузкиФайлов.Авто;
	КонецЕсли;

	Плагины.ПередНачаломВыполнения(ПутьКХранилищу, КаталогРабочейКопии, URLРепозитория, ИмяВетки);

	Лог.Информация("Начало синхронизации с git");
	Лог.Отладка("Используется формат выгрузки " + Формат);
	
	ТаблицаИсторииХранилища = ПрочитатьИзХранилищаИсториюКоммитовСАвторами(ПутьКХранилищу, КаталогРабочейКопии);

	ДополнитьТаблицуХранилищаИнформациейОСигнатуреПользователяВГит(ТаблицаИсторииХранилища, КаталогРабочейКопии);

	ТекущаяВерсия = НомерСинхронизированнойВерсии(КаталогРабочейКопии);

	Лог.Информация("Номер синхронизированной версии: " + ТекущаяВерсия);
	СледующаяВерсия = ТекущаяВерсия + 1;

	МаксимальнаяВерсияДляРазбора = ОпределитьМаксимальнуюВерсиюВХранилище(ТаблицаИсторииХранилища);
	Лог.Информация("Номер последней версии в хранилище: " + МаксимальнаяВерсияДляРазбора);
		
	Если СледующаяВерсия > МаксимальнаяВерсияДляРазбора И СледующаяВерсия - МаксимальнаяВерсияДляРазбора > МинимальнаяРазницаМеждуКоммитамиНовогоХранилища Тогда
		Лог.Ошибка("Несоответствие версий хранилища 1С и версию в репозитории Git. 
		|Возможно, сократили/обрезали хранилище. 
		|Для продолжения синхронизации измените файл VERSIONS в корне репозитория Git, 
		|Исправьте версию %1 на правильную версию <= версии в хранилище %2", ТекущаяВерсия, МаксимальнаяВерсияДляРазбора);
		
		ВызватьИсключение СтрШаблон("Версия git %1 больше версии хранилища %2 на %3", ТекущаяВерсия, МаксимальнаяВерсияДляРазбора, СледующаяВерсия - МаксимальнаяВерсияДляРазбора); 
	КонецЕсли;

	Плагины.ПередНачаломЦиклаОбработкиВерсий(ТаблицаИсторииХранилища, ТекущаяВерсия, СледующаяВерсия, МаксимальнаяВерсияДляРазбора);

	Пока СледующаяВерсия <= МаксимальнаяВерсияДляРазбора Цикл
				
		СтрокаВерсии = ТаблицаИсторииХранилища.Найти(СледующаяВерсия, "НомерВерсии");
		Если СтрокаВерсии <> Неопределено Тогда

			Плагины.ПередОбработкойВерсииХранилища(СтрокаВерсии, СледующаяВерсия);

			Попытка
				Лог.Информация("Получаем исходники для версии " + СледующаяВерсия + ", " + ТекущаяДата());
				
				Плагины.ПриОбработкеВерсииХранилища(СтрокаВерсии, СледующаяВерсия);
				ВыгрузитьВерсиюХранилищаКонфигурацииВИсходники(КаталогРабочейКопии, ПутьКХранилищу, СледующаяВерсия, Формат);

				Лог.Отладка("Фиксируем в файле VERSION версию " + СледующаяВерсия);
				ЗаписатьФайлВерсийГит(КаталогРабочейКопии, СледующаяВерсия);
				ВыполнитьКоммитГит(КаталогРабочейКопии, СтрокаВерсии.Комментарий, СтрокаВерсии.ПредставлениеАвтора, СтрокаВерсии.Дата);


			Исключение
				Лог.Отладка("Откатываем файл VERSION после ошибки");
				ЗаписатьФайлВерсийГит(КаталогРабочейКопии, ТекущаяВерсия);
				ВызватьИсключение;
			КонецПопытки;

			ТекущаяВерсия = СледующаяВерсия;
			Плагины.ПослеОбработкиВерсииХранилища(СтрокаВерсии, ТекущаяВерсия);
		
		КонецЕсли;

		СледующаяВерсия = СледующаяВерсия + 1;

	КонецЦикла;

	ЗавершитьПроцесс_TGitCache_exe();

	Плагины.ПослеОкончанияВыполнения(ПутьКХранилищу, КаталогРабочейКопии, URLРепозитория, ИмяВетки);

КонецПроцедуры

#Область ОБРАБОТКА ВЕРСИИ КОНФИГУРАЦИИ

////////////////////////////////
// ОБРАБОТКА ВЕРСИИ КОНФИГУРАЦИИ

Процедура ВыгрузитьВерсиюХранилищаКонфигурацииВИсходники(Знач КаталогРабочейКопии, Знач ПутьКХранилищу, Знач НомерВерсии, Знач Формат) Экспорт
	
	Конфигуратор = ПолучитьМенеджерКонфигуратора();
	Если ВерсияПлатформы <> Неопределено Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	Иначе
		Конфигуратор.ИспользоватьВерсиюПлатформы("8.3");
	КонецЕсли;

	Плагины.ПередНачаломВыгрузкиВерсииХранилищаКонфигурации(Конфигуратор, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, Формат);
	
	Плагины.ПередЗагрузкойВерсииХранилищаКонфигурации(Конфигуратор, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, Формат);
	ЗагрузитьВерсиюХранилищаВКонфигурацию(Конфигуратор, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии);

	КаталогВыгрузки = ВременныеФайлы.СоздатьКаталог();
	
	Лог.Отладка("Каталог выгрузки <%1> для версии <%2>",КаталогВыгрузки , НомерВерсии);

	Плагины.ПередВыгрузкойКонфигурациюВИсходники(Конфигуратор, КаталогРабочейКопии, КаталогВыгрузки, ПутьКХранилищу, НомерВерсии, Формат);
	ВыгрузитьКонфигурациюВИсходники(Конфигуратор, КаталогВыгрузки, Формат);

	Плагины.ПередОчисткойКаталогаРабочейКопии(Конфигуратор, КаталогРабочейКопии, КаталогВыгрузки, ПутьКХранилищу, НомерВерсии, Формат);
	ОчиститьКаталогРабочейКопии(КаталогРабочейКопии);
	
	Плагины.ПередПеремещениемВКаталогРабочейКопии(Конфигуратор, КаталогРабочейКопии, КаталогВыгрузки, ПутьКХранилищу, НомерВерсии, Формат);
	ПереместитьВКаталогРабочейКопии(КаталогРабочейКопии, КаталогВыгрузки, Формат);
	
	Плагины.ПослеОкончанияВыгрузкиВерсииХранилищаКонфигурации(Конфигуратор, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, Формат);
	
	УдалитьВременныеФайлыПриНеобходимости(Конфигуратор.КаталогСборки());

КонецПроцедуры

Процедура ЗагрузитьВерсиюХранилищаВКонфигурацию(Знач Конфигуратор, Знач КаталогРабочейКопии, Знач ПутьКХранилищу, Знач НомерВерсии) Экспорт
	СтандартнаяОбработка = Истина;

	Плагины.ПриЗагрузкеВерсииХранилищаВКонфигурацию(Конфигуратор, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		ФайлХранилища = Новый Файл(ПолучитьПутьКБазеДанныхХранилища(ПутьКХранилищу));

		Если ФайлХранилища.Существует() И ФайлХранилища.ЭтоФайл() И ВРег(ФайлХранилища.Расширение) = ".1CD" Тогда
			ВремКаталог = ВременныеФайлы.СоздатьКаталог();
			ФайлВерсии  = ИмяФайлаВыгрузкиВерсииХранилища(ВремКаталог, НомерВерсии);
			Лог.Отладка("Выгружаем версию хранилища в файл " + ФайлВерсии);
			
			// Получение cf
			ПоНомеруВерсииСохранитьКонфигурациюСредствамиTool1CD(ФайлХранилища.ПолноеИмя, ФайлВерсии, НомерВерсии);
			
			КоличествоЦикловОжиданияЛицензии = ПолучитьКоличествоЦикловОжиданияЛицензииПоУмолчанию();
			
			Пока КоличествоЦикловОжиданияЛицензии >= 0 Цикл
				Попытка
					
					Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлВерсии, Ложь);
					Прервать;
		
				Исключение
					
					// проверим текст ошибки, если текст содержит информацию о необходимости конвертировать
					// тогда выполним конвертацию и повторно попытаемся загрузить файл
					ТекстОшибки = ВРег(Конфигуратор.ВыводКоманды());
					Если Найти(ТекстОшибки, Врег("Структура конфигурации несовместима с текущей версией программы")) Тогда
						
						Конфигуратор.СконвертироватьФайлКонфигурации(ФайлВерсии);
						Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлВерсии, Ложь);
						Прервать;
						
					ИначеЕсли Найти(ТекстОшибки, Врег("Не обнаружено свободной лицензии!")) Тогда
						Лог.Ошибка(ТекстОшибки);
						Лог.Информация("Повторное подключение через 10сек. Осталось попыток: " + КоличествоЦикловОжиданияЛицензии);
						Приостановить(10000);
		
					Иначе
						
						ВызватьИсключение ТекстОшибки;
						
					КонецЕсли;
					
				КонецПопытки;
		
				Если ПолучитьКоличествоЦикловОжиданияЛицензииПоУмолчанию() <> 0 Тогда
					КоличествоЦикловОжиданияЛицензии = КоличествоЦикловОжиданияЛицензии - 1;
				КонецЕсли;
				
			КонецЦикла;

			УдалитьВременныеФайлыПриНеобходимости(ВремКаталог);
		Иначе
			ВызватьИсключение "Что-то пошло не так "
		КонецЕсли

	КонецЕсли;

	Плагины.ПослеЗагрузкиВерсииХранилищаВКонфигурацию(Конфигуратор, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии);

КонецПроцедуры

Процедура ВыгрузитьКонфигурациюВИсходники(Знач Конфигуратор, Знач КаталогВыгрузки, Знач Формат) Экспорт
	
	СтандартнаяОбработка = Истина;

	Плагины.ПриВыгрузкеКонфигурациюВИсходники(Конфигуратор, КаталогВыгрузки, Формат, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Конфигуратор.ВыгрузитьКонфигурациюВФайлы(КаталогВыгрузки, Формат);
		
	КонецЕсли;
	
	Плагины.ПослеВыгрузкиКонфигурациюВИсходники(Конфигуратор, КаталогВыгрузки,  Формат);
	
КонецПроцедуры

Процедура ОчиститьКаталогРабочейКопии(Знач КаталогРабочейКопии) Экспорт
	
	СтандартнаяОбработка = Истина;

	СоответствиеИменФайловДляПропуска = Новый Соответствие;
	СоответствиеИменФайловДляПропуска.Вставить(".git", Истина);
	СоответствиеИменФайловДляПропуска.Вставить(ИмяФайлаАвторов(), Истина); //Соответствие авторов и транслитерации.
	СоответствиеИменФайловДляПропуска.Вставить(ИмяФайлаВерсииХранилища(), Истина); //Номер версии, может использоватся для синхронизации с хранилищем.

	Плагины.ПриОчисткеКаталогаРабочейКопии(КаталогРабочейКопии, СоответствиеИменФайловДляПропуска, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
	
		//Удалим все каталоги с файлами в папке для разбора, кроме папки, начинающейся с с точки.
		ЕстьОшибкаУдаления = Ложь;
		Для НомерПопытки = 1 По 2 Цикл
			МассивФайлов = НайтиФайлы(КаталогРабочейКопии, ПолучитьМаскуВсеФайлы());
			Если МассивФайлов.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
	
			Для Каждого ЭлементМассива Из МассивФайлов Цикл
				Если СоответствиеИменФайловДляПропуска[ЭлементМассива.Имя] = Истина Тогда
					Продолжить;
				КонецЕсли;
	
				Попытка
					УдалитьФайлы(ЭлементМассива.ПолноеИмя);
				Исключение
					ЕстьОшибкаУдаления = Истина;
					Если НомерПопытки = 2 Тогда
						ВызватьИсключение;
					КонецЕсли;
				КонецПопытки;
			КонецЦикла;
	
			Если Не ЕстьОшибкаУдаления Тогда
				Прервать;
			КонецЕсли;
	
		КонецЦикла;
		
	КонецЕсли;
	
	Плагины.ПослеОчисткиКаталогаРабочейКопии(КаталогРабочейКопии, СоответствиеИменФайловДляПропуска);
	
КонецПроцедуры

Процедура ПереместитьВКаталогРабочейКопии(Знач КаталогРабочейКопии, Знач КаталогВыгрузки, Знач Формат) Экспорт
	
	СтандартнаяОбработка = Истина;

	ТаблицаПереименования = Новый ТаблицаЗначений;
	ТаблицаПереименования.Колонки.Добавить("Источник");
	ТаблицаПереименования.Колонки.Добавить("Приемник");

	ПутьКФайлуПереименования = ОбъединитьПути(КаталогРабочейКопии, "renames.txt");

	Плагины.ПриПеремещенииВКаталогРабочейКопии(КаталогРабочейКопии, КаталогВыгрузки, ТаблицаПереименования, ПутьКФайлуПереименования, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
			
		НативнаяИерархия = ЭтоНативнаяИерархия(Формат);
		СписокФайлов = НайтиФайлы(КаталогВыгрузки, ПолучитьМаскуВсеФайлы(), НативнаяИерархия);
		Лог.Отладка("Найдено файлов выгрузки: "+СписокФайлов.Количество()+" шт.");
		Для Каждого Файл Из СписокФайлов Цикл
			ИмяФайлаДляПереименования = Файл.Имя;
			Если НативнаяИерархия Тогда
				ИмяНовогоФайла = СтрЗаменить(Файл.ПолноеИмя, КаталогВыгрузки, "");
				ИмяНовогоФайла = ?(Лев(ИмяНовогоФайла, 1) ="/", Сред(ИмяНовогоФайла, 2), ИмяНовогоФайла);
				ИмяНовогоФайла = ?(Лев(ИмяНовогоФайла, 1) ="\", Сред(ИмяНовогоФайла, 2), ИмяНовогоФайла);
				Если Файл.ЭтоКаталог() Тогда
					ИмяКаталога = ОбъединитьПути(КаталогРабочейКопии, ИмяНовогоФайла);
					ФайлКаталога = Новый Файл(ИмяКаталога);
					Если ФайлКаталога.Существует() = Ложь Тогда
						СоздатьКаталог(ИмяКаталога);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				ИмяФайлаДляПереименования = ИмяНовогоФайла;
			Иначе
				Если Файл.ЭтоКаталог() Тогда
					ОбработатьКаталогРезультатаВыгрузки(Файл, КаталогРабочейКопии, ТаблицаПереименования);
					Продолжить;
				КонецЕсли;
	
				ИмяФайла = СкорректироватьИмяФайлаМетаданных(Файл.ИмяБезРасширения);
	
				//Определим длину Наименования папки, по умолчанию не больше 60 символов.
				Если СтрДлина(ИмяФайла)>144 Тогда
					СократитьДлинуИмениФайла(ИмяФайла, КаталогРабочейКопии);
				КонецЕсли;
	
				ИмяНовогоФайла = СтрЗаменить(ИмяФайла, ".", ПолучитьРазделительПути())+Файл.Расширение;
	
			КонецЕсли;
	
			НовыйФайл = Новый Файл(ОбъединитьПути(КаталогРабочейКопии, ИмяНовогоФайла));
			НовыйКаталог = Новый Файл(НовыйФайл.Путь);
			Если НЕ НовыйКаталог.Существует() Тогда
				СоздатьКаталог(НовыйКаталог.ПолноеИмя);
			КонецЕсли;
	
			ДобавитьПереименование(ТаблицаПереименования,ИмяФайлаДляПереименования, ИмяНовогоФайла);
	
			КопироватьФайл(Файл.ПолноеИмя, НовыйФайл.ПолноеИмя);
	
			Если Нрег(Файл.Имя) = "form.bin" Тогда
				КаталогФормы = ОбъединитьПути(НовыйКаталог.ПолноеИмя, НовыйФайл.ИмяБезРасширения);
				СоздатьКаталог(КаталогФормы);
				РаспаковатьКонтейнерМетаданных(НовыйФайл.ПолноеИмя, КаталогФормы);
			КонецЕсли;
	
		КонецЦикла;
	
		ТекстовыйДокумент = Новый ЗаписьТекста(ПутьКФайлуПереименования);
		Для Каждого ЭлементСтроки Из ТаблицаПереименования Цикл
			ТекстовыйДокумент.ЗаписатьСтроку(СтрШаблон("%1-->%2", ЭлементСтроки.Источник, ЭлементСтроки.Приемник));
		КонецЦикла;
		ТекстовыйДокумент.Закрыть();
		
	КонецЕсли;
	
	Плагины.ПослеПеремещенияВКаталогРабочейКопии(КаталогРабочейКопии, КаталогВыгрузки, ТаблицаПереименования, ПутьКФайлуПереименования);
	
КонецПроцедуры

#КонецОбласти

#Область РАБОТА С КОНФИГУРАТОРОМ 

Функция ПолучитьМенеджерКонфигуратора() Экспорт
	Конфигуратор = Новый УправлениеКонфигуратором;
	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());
	КаталогСборки = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогСборки);
	Возврат Конфигуратор;
КонецФункции

Процедура ВыполнитьКомандуКонфигуратора(Знач Конфигуратор, Знач ПараметрыЗапуска)

	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение

		ОписаниеОшибки = ОписаниеОшибки();
		Если ПроверитьОписаниеОшибкиНаКритичность(ОписаниеОшибки) Тогда
			УдалитьВременныеФайлыПриНеобходимости(Конфигуратор.КаталогСборки());
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

Функция МассивНеКритическихОшибок()
	
	Массив = Новый Массив;
	Массив.Добавить("Конфигурация содержит объекты метаданных, длина имен которых превышает 80 символов!");

	Возврат Массив;
КонецФункции

Функция ПроверитьОписаниеОшибкиНаКритичность(Знач ОписаниеОшибки)

	МассивНеКритическихОшибок = МассивНеКритическихОшибок();

	Для Каждого НеКритичнаяОшибка Из МассивНеКритическихОшибок Цикл

		Если СтрНайти(ОписаниеОшибки, НеКритичнаяОшибка) > 0 Тогда 
			Возврат Ложь; 
		КонецЕсли;

	КонецЦикла;
	Возврат Истина;
КонецФункции

#КонецОбласти

Функция ЭтоНативнаяИерархия(Знач Формат)
    Возврат Формат = РежимВыгрузкиФайлов.Иерархический;
КонецФункции

Процедура ОбработатьКаталогРезультатаВыгрузки(Знач Файл, Знач КаталогИерархическойСтруктурыМодулей, Знач Переименования)
	Если Прав(Файл.Имя, 5) = "files" Тогда // файлы справки.
		МассивФайлов = НайтиФайлы(Файл.ПолноеИмя, ПолучитьМаскуВсеФайлы());
		ИмяНовогоФайла = Лев(Файл.Имя, СтрДлина(Файл.Имя)-6);
		ИмяНовогоФайла = СтрЗаменить(ИмяНовогоФайла, ".", ПолучитьРазделительПути())+".del";
		НовыйФайл = Новый Файл(ОбъединитьПути(КаталогИерархическойСтруктурыМодулей, ИмяНовогоФайла));
		НовыйКаталог = Новый Файл(НовыйФайл.Путь);
		Если НЕ НовыйКаталог.Существует() Тогда
			СоздатьКаталог(НовыйКаталог.ПолноеИмя);
		КонецЕсли;
		НовыйФайл = Новый Файл(ОбъединитьПути(НовыйКаталог.ПолноеИмя, Файл.Имя));
		Если Не НовыйФайл.Существует() Тогда
			СоздатьКаталог(НовыйФайл.ПолноеИмя);
		КонецЕсли;
		Для Каждого ЭлементЦикла Из МассивФайлов Цикл
			ДобавитьПереименование(Переименования,
				ОбъединитьПути(Файл.Имя, ЭлементЦикла.Имя),
				СтрЗаменить(ОбъединитьПути(НовыйФайл.ПолноеИмя, ЭлементЦикла.Имя), КаталогИерархическойСтруктурыМодулей+ПолучитьРазделительПути(), ""));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция СкорректироватьИмяФайлаМетаданных(Знач ИмяФайла)

	Если Прав(ИмяФайла, 12) = "Форма.Модуль" Тогда
		ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-12)+"МодульФормы";
	КонецЕсли;

	Если Прав(ИмяФайла, 6) = ".Макет" Тогда
		ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-6);
	КонецЕсли;

	Если Прав(ИмяФайла, 17) = ".Картинка.Picture" Тогда
		ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-17);
	КонецЕсли;

	Если Прав(ИмяФайла, 5) = ".Form" Тогда

	КонецЕсли;

	// Для 8.3 если файл содержит всего одну точку в имени, тогда создадим папки и туда его и кинем.
	//

	Если СтрЧислоВхождений(ИмяФайла, ".") = 1 Тогда
		//Увеличим наименование на Наименование объекта конфигурации описываемого.
		НаименованиеОбъектаМетаданных = Сред(ИмяФайла, Найти(ИмяФайла, "."));
		ИмяФайла = СтрЗаменить(ИмяФайла, НаименованиеОбъектаМетаданных,НаименованиеОбъектаМетаданных+НаименованиеОбъектаМетаданных);
	КонецЕсли;

	Возврат ИмяФайла;

КонецФункции

Процедура СократитьДлинуИмениФайла(ИмяФайла, Знач КаталогИерархическойСтруктурыМодулей)

	КэшПереименований = Новый Соответствие;
	МассивИмен = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ИмяФайла, ".");

	ИмяФайла = "";
	Счетчик = 0;
	КоличествоВсего = МассивИмен.Количество();
	Для Счетчик = 0 По КоличествоВсего-1 Цикл
		ЭлементМассива = МассивИмен.Получить(Счетчик);
		НовоеИмя = ЭлементМассива;
		ДлинаИмени = СтрДлина(ЭлементМассива);

		Если ДлинаИмени > 58 Тогда
			Лог.Отладка("Слишком длинное имя:"+ЭлементМассива +" длина:"+ДлинаИмени);

			Если КэшПереименований.Получить(ЭлементМассива) <> Неопределено Тогда
				НовоеИмя = КэшПереименований.Получить(ЭлементМассива);
			Иначе
				Разрядность = СтрДлина(Строка(ДлинаИмени));
				НовоеИмя = Лев(ЭлементМассива, 58-Разрядность-1)+"~"+ДлинаИмени;
				НовыйПутьПроверки = Новый Файл(КаталогИерархическойСтруктурыМодулей + ПолучитьРазделительПути()+ ИмяФайла + НовоеИмя);
				Если НовыйПутьПроверки.Существует() Тогда
					СчетчикНовогоИмени = 0;
					МассивФайловСущуствующих = НайтиФайлы(ОбъединитьПути(КаталогИерархическойСтруктурыМодулей, ИмяФайла), Лев(ЭлементМассива, 58-Разрядность-3)+"*");
					СчетчикНовогоИмени = МассивФайловСущуствующих.Количество()+1;
					НовоеИмя = Лев(ЭлементМассива, 58-Разрядность-3)+"~"+ДлинаИмени+ФорматДвузначноеЧисло(Строка(СчетчикНовогоИмени));
				КонецЕсли;

				КэшПереименований.Вставить(ЭлементМассива, НовоеИмя);
			КонецЕсли;

			Лог.Отладка("Старое имя:"+ЭлементМассива +" новое имя:"+НовоеИмя);
		КонецЕсли;
		ИмяФайла=ИмяФайла+НовоеИмя+ПолучитьРазделительПути();
	КонецЦикла;
	ИмяФайла = ?(Прав(ИмяФайла,1)=ПолучитьРазделительПути(), Лев(ИмяФайла, СтрДлина(ИмяФайла)-1), ИмяФайла);

КонецПроцедуры

Процедура РаспаковатьКонтейнерМетаданных(Знач ФайлРаспаковки, Знач КаталогРаспаковки, Знач Переименования = "", Знач КорневойКаталог = "")

	СтандартнаяОбработка = Истина;

	Плагины.ПриРаспаковкеКонтейнераМетаданных(ФайлРаспаковки, КаталогРаспаковки, СтандартнаяОбработка);	
	
	Если СтандартнаяОбработка Тогда
		dllРаспаковать(ФайлРаспаковки, КаталогРаспаковки);
		ВыполнитьСборкуМусора(); // см. камент к процедуре dllРаспаковать
	КонецЕсли;

	Плагины.ПослеРаспаковкиКонтейнераМетаданных(ФайлРаспаковки, КаталогРаспаковки);	

КонецПроцедуры

// хитрость: надо выносить в отдельную процедуру, 
// а сборку мусора делать в другом кадре стека вызовов.
// иначе сборка ничего не соберет
//
Процедура dllРаспаковать(Знач ФайлРаспаковки, Знач КаталогРаспаковки)
		
	Распаковщик = Новый ЧтениеФайла8(ФайлРаспаковки);
	Распаковщик.ИзвлечьВсе(КаталогРаспаковки, Истина);
	ОсвободитьОбъект(Распаковщик); // почему-то этого недостаточно. Вопрос к реализации компоненты.
	Распаковщик = Неопределено;
	
КонецПроцедуры

#Область РАБОТА С GIT

/////////////////////////////////////
// GIT Пересмотр

Функция ПолучитьГитРепозиторий(Знач КаталогРабочейКопии)
	
	ФайлКаталога = Новый Файл(ОбъединитьПути(ТекущийКаталог(), КаталогРабочейКопии));
	Если ФайлКаталога.ПолноеИмя = РабочийКаталогСохр Тогда
		ГитРепозиторий = ГитРепозиторийСохр;
	Иначе
		ГитРепозиторий = Новый ГитРепозиторий;
		ГитРепозиторий.УстановитьРабочийКаталог(КаталогРабочейКопии);
		ГитРепозиторий.УстановитьТихийРежимРаботы();
		
		ГитРепозиторий.УстановитьНастройку("core.quotepath", "false", РежимУстановкиНастроекGit.Локально);
		ГитРепозиторий.УстановитьНастройку("merge.ours.driver", "true", РежимУстановкиНастроекGit.Локально);

		ГитРепозиторий.УстановитьНормальныйРежимРаботы();
		
		РабочийКаталогСохр = ФайлКаталога.ПолноеИмя;
		ГитРепозиторийСохр = ГитРепозиторий;

	КонецЕсли;

	Возврат ГитРепозиторий;

КонецФункции // ПолучитьГитРепозиторий()


// Выполняет фиксацию изменений в локальном каталоге git
//
Процедура ВыполнитьКоммитГит(Знач КаталогРабочейКопии, Знач Комментарий, Знач Автор, Знач Дата = Неопределено) Экспорт

	Плагины.ПередКоммитом(КаталогРабочейКопии, Комментарий, Автор, Дата);

	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	авторДляГит = Автор;
	
	Лог.Отладка("Автор коммита: %1", авторДляГит);
	ДатаДляГит = ДатаPOSIX(Дата);
	Лог.Отладка("Дата коммита: %1", ДатаДляГит);
	ИмяФайлаКомментария = ПодготовитьФайлКоммита(Комментарий);
	
	ГитРепозиторий = ПолучитьГитРепозиторий(КаталогРабочейКопии);
	ПроиндексироватьОтслеживаемыеФайлы = Истина;
	// Выполнение индексации всех измененных файлов
	Плагины.ПриКоммите(ГитРепозиторий, 
				Комментарий, 
				ПроиндексироватьОтслеживаемыеФайлы, 
				ИмяФайлаКомментария, 
				авторДляГит,
				ДатаДляГит,
				авторДляГит,
				ДатаДляГит);
	
	ГитРепозиторий.ВыполнитьКоманду(СтрРазделить("add -A .", " "));
	ГитРепозиторий.Закоммитить(Комментарий,
								ПроиндексироватьОтслеживаемыеФайлы,
								ИмяФайлаКомментария,
								авторДляГит,
								ДатаДляГит,
								авторДляГит,
								ДатаДляГит);
	Лог.Отладка("Вывод команды Commit: %1", СокрЛП(ГитРепозиторий.ПолучитьВыводКоманды()));
	
	Плагины.ПослеКоммита(ГитРепозиторий, КаталогРабочейКопии);
		
	ЗавершитьПроцесс_TGitCache_exe();

КонецПроцедуры


// Выполняет клонирование удаленного репо
//
Функция КлонироватьРепозитарий(Знач КаталогЛокальнойКопии, Знач URLРепозитария) Экспорт

	ГитРепозиторий = ПолучитьГитРепозиторий(КаталогЛокальнойКопии);
	ГитРепозиторий.УстановитьТихийРежимРаботы();
	ГитРепозиторий.КлонироватьРепозиторий(URLРепозитария, КаталогЛокальнойКопии);
	КодВозврата = ГитРепозиторий.ПолучитьКодВозврата();
	
	Возврат КодВозврата;

КонецФункции

// Выполняет инициализацию репо
//
Функция ИнициализироватьРепозитарий(Знач КаталогЛокальнойКопии) Экспорт

	ГитРепозиторий = ПолучитьГитРепозиторий(КаталогЛокальнойКопии);
	ГитРепозиторий.УстановитьТихийРежимРаботы();
	ГитРепозиторий.Инициализировать();
	КодВозврата = ГитРепозиторий.ПолучитьКодВозврата();
	
	Возврат КодВозврата;

КонецФункции

// Возвращает Истина, если каталог является каталогом или подкаталогом гит-репозитория, иначе возвращается Ложь.
//
Функция ПроверитьНаличиеРепозитарияГит(Знач КаталогЛокальнойКопии) Экспорт
	
	Сообщить("Пууу");
	ГитРепозиторий = ПолучитьГитРепозиторий(КаталогЛокальнойКопии);
	ГитРепозиторий.УстановитьТихийРежимРаботы();

	ТекстСтатуса = ГитРепозиторий.Статус();
	КодВозврата = ГитРепозиторий.ПолучитьКодВозврата();

	Возврат КодВозврата = 0;

КонецФункции // ПроверитьНаличиеРепозитарияГит(Знач Каталог) Экспорт

Функция ПодготовитьФайлКоммита(Знач Комментарий)
	
	ИмяФайлаКомментария = ВременныеФайлы.СоздатьФайл("txt");
	ФайлКомментария = Новый ЗаписьТекста(ИмяФайлаКомментария, КодировкаТекста.UTF8NoBOM);
	ФайлКомментария.Записать(?(ПустаяСтрока(Комментарий), ".", Комментарий));
	ФайлКомментария.Закрыть();
	Лог.Отладка(СтрШаблон("Текст коммита: %1", Комментарий));

	Возврат ИмяФайлаКомментария;

КонецФункции


#КонецОбласти






//////////////////////////////////////////////////////////////////////////
// Работа с таблицами хранилища 1С


// Выполняет чтение таблицы VERSIONS из хранилища 1С
//
// Возвращаемое значение: ТаблицаЗначений
//
Функция ПрочитатьТаблицуИсторииХранилища(Знач ФайлХранилища) Экспорт

	ЧтениеБазыДанных = Новый ЧтениеТаблицФайловойБазыДанных;
	ЧтениеБазыДанных.ОткрытьФайл(ФайлХранилища);
	Попытка
		ТаблицаБД = ЧтениеБазыДанных.ПрочитатьТаблицу("VERSIONS");
	Исключение
		ЧтениеБазыДанных.ЗакрытьФайл();
		ВызватьИсключение;
	КонецПопытки;

	ЧтениеБазыДанных.ЗакрытьФайл();

	ТаблицаВерсий = КонвертироватьТаблицуВерсийИзФорматаБД(ТаблицаБД);
	ТаблицаВерсий.Сортировать("НомерВерсии");

	Возврат ТаблицаВерсий;

КонецФункции

// Считывает таблицу USERS пользователей хранилища
//
Функция ПрочитатьТаблицуПользователейХранилища(Знач ФайлХранилища) Экспорт

	ЧтениеБазыДанных = Новый ЧтениеТаблицФайловойБазыДанных;
	ЧтениеБазыДанных.ОткрытьФайл(ФайлХранилища);
	Попытка
		ТаблицаБД = ЧтениеБазыДанных.ПрочитатьТаблицу("USERS");
	Исключение
		ЧтениеБазыДанных.ЗакрытьФайл();
		ВызватьИсключение;
	КонецПопытки;

	ЧтениеБазыДанных.ЗакрытьФайл();

	Возврат КонвертироватьТаблицуПользователейИзФорматаБД(ТаблицаБД);

КонецФункции

// Считывает из хранилища историю коммитов с привязкой к пользователям
//
Функция ПрочитатьИзХранилищаИсториюКоммитовСАвторами(Знач ПутьКХранилищу, Знач КаталогРабочейКопии) Экспорт
	
	СтандартнаяОбработка = Истина;

	ТаблицаВерсий = НоваяТаблицаИсторииВерсий();
	ТаблицаПользователей = НоваяТаблицаПользователейХранилища();
	
	Плагины.ПриПолученииТаблицыВерсий(ТаблицаВерсий, ПутьКХранилищу, КаталогРабочейКопии, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		ФайлХранилища = ПолучитьПутьКБазеДанныхХранилища(ПутьКХранилищу);
		Лог.Отладка("Файл хранилища конфигурации: " + ФайлХранилища);
	
		ЧтениеБазыДанных = Новый ЧтениеТаблицФайловойБазыДанных;
		ЧтениеБазыДанных.ОткрытьФайл(ФайлХранилища);
		Попытка
			Таблицы = ЧтениеБазыДанных.ВыгрузитьТаблицыВXML("USERS;VERSIONS");
			ТаблицаВерсий        = ЧтениеБазыДанных.ПрочитатьТаблицуИзXml(Таблицы["VERSIONS"]);
			ТаблицаПользователей = ЧтениеБазыДанных.ПрочитатьТаблицуИзXml(Таблицы["USERS"]);
		Исключение
			ЧтениеБазыДанных.ЗакрытьФайл();
			ВызватьИсключение;
		КонецПопытки;

		ЧтениеБазыДанных.ЗакрытьФайл();

		ТаблицаВерсий = КонвертироватьТаблицуВерсийИзФорматаБД(ТаблицаВерсий);
		ТаблицаПользователей = КонвертироватьТаблицуПользователейИзФорматаБД(ТаблицаПользователей);
		
		ДополнитьТаблицуВерсийИменамиАвторов(ТаблицаВерсий, ТаблицаПользователей);
		ТаблицаВерсий.Сортировать("НомерВерсии");
	
	КонецЕсли;
	
	Плагины.ПослеПолученияТаблицыВерсий(ТаблицаВерсий, ПутьКХранилищу, КаталогРабочейКопии);
	
	Возврат ТаблицаВерсий;

КонецФункции

// Прописывает в таблицы пользователей и версий информацию о git auth вида user <user@email.com>
//
Процедура ДополнитьТаблицуХранилищаИнформациейОСигнатуреПользователяВГит(Знач ТаблицаХранилища, Знач КаталогРепо) Экспорт

	ПутьКФайлуСопоставления = ОбъединитьПути(КаталогРепо, ИмяФайлаАвторов());
	ТаблицаСопоставления = ПрочитатьФайлАвторовГитВТаблицуПользователей(ПутьКФайлуСопоставления);
	Для Каждого Строка Из ТаблицаХранилища Цикл

		СтрокаПользователя = ТаблицаСопоставления.Найти(строка.Автор, "Автор");
		Если СтрокаПользователя = Неопределено Тогда
			ПредставлениеАвтора = СтроковыеФункции.ПодставитьПараметрыВСтроку("%1 <%1@%2>", строка.Автор, Строка(ДоменПочтыДляGit()));
		Иначе
			ПредставлениеАвтора = строкаПользователя.ПредставлениеАвтора;
		КонецЕсли;

		Строка.ПредставлениеАвтора = ПредставлениеАвтора;

	КонецЦикла;

КонецПроцедуры

Функция КонвертироватьТаблицуВерсийИзФорматаБД(Знач ТаблицаБД)

	ТаблицаВерсий = НоваяТаблицаИсторииВерсий();

	Для Каждого СтрокаБД Из ТаблицаБД Цикл

		Если СтрокаБД.VERDATE = "0000-00-00T00:00:00" Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ТаблицаВерсий.Добавить();
		НоваяСтрока.НомерВерсии = Число(СтрокаБД.VERNUM);
		НоваяСтрока.ГУИД_Автора = СтрокаБД.USERID;
		НоваяСтрока.Тэг = СтрокаБД.CODE;

		Дата = СтрЗаменить(СтрЗаменить(СтрокаБД.VERDATE, "-", ""), ":", "");
		Дата = СтрЗаменить(Дата, "T", "");
		Дата = Дата(Дата);
		НоваяСтрока.Дата = Дата;
		НоваяСтрока.Комментарий = СтрокаБД.COMMENT;

	КонецЦикла;

	Возврат ТаблицаВерсий;
КонецФункции

Функция КонвертироватьТаблицуПользователейИзФорматаБД(Знач ТаблицаБД)
	ТаблицаПользователей = НоваяТаблицаПользователейХранилища();

	Для Каждого СтрокаБД Из ТаблицаБД Цикл

		НоваяСтрока = ТаблицаПользователей.Добавить();
		НоваяСтрока.Автор       = СтрокаБД.NAME;
		НоваяСтрока.ГУИД_Автора = СтрокаБД.USERID;

	КонецЦикла;

	Возврат ТаблицаПользователей;

КонецФункции

Функция НоваяТаблицаИсторииВерсий()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерВерсии");
	Таблица.Колонки.Добавить("ГУИД_Автора");
	Таблица.Колонки.Добавить("Автор");
	Таблица.Колонки.Добавить("Тэг");
	Таблица.Колонки.Добавить("Дата");
	Таблица.Колонки.Добавить("Комментарий");
	Таблица.Колонки.Добавить("ПредставлениеАвтора");

	Возврат Таблица;

КонецФункции

Функция НоваяТаблицаПользователейХранилища()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Автор");
	Таблица.Колонки.Добавить("ГУИД_Автора");
	Таблица.Колонки.Добавить("ПредставлениеАвтора");

	Возврат Таблица;

КонецФункции

Процедура ДополнитьТаблицуВерсийИменамиАвторов(Знач ТаблицаВерсий, Знач ТаблицаПользователей)

	Для Каждого Строка Из ТаблицаВерсий Цикл
		строкаПользователя = ТаблицаПользователей.Найти(Строка.ГУИД_Автора, "ГУИД_Автора");
		Если строкаПользователя = Неопределено Тогда
			Сообщение = "Не удалось найти автора коммита из хранилища 1С по номеру версии <%1>, комментарий <%2>, ГУИД-у <%3> - ПолучитьТаблицуВерсийИзФайлаХранилища1С";
			Лог.Ошибка(СтроковыеФункции.ПодставитьПараметрыВСтроку(Сообщение, строка.НомерВерсии, строка.Комментарий, строка.ГУИД_Автора));
		Иначе
			строка.Автор = строкаПользователя.Автор;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Генерирует файл соответствия пользователей хранилища 1С и git
//
Процедура СформироватьПервичныйФайлПользователейДляGit(Знач ИмяФайлаХранилища, Знач ВыходнойФайл) Экспорт

	резПутьКХМЛФайлуВерсийХранилища1С = "";
	резПутьКХМЛФайлуПользователейХранилища1С = "";

	Лог.Отладка("Формируем первичный файл авторов:
	| Файл хранилища: " + ИмяФайлаХранилища + "
	| Выходной файл: " + ВыходнойФайл);

	ТаблицаПользователейХранилища = ПрочитатьТаблицуПользователейХранилища(ИмяФайлаХранилища);

	ЗаписатьТаблицуПользователейВФайлАвторовGit(ТаблицаПользователейХранилища, ВыходнойФайл, ДоменПочтыДляGit());

КонецПроцедуры

Процедура ЗаписатьТаблицуПользователейВФайлАвторовGit(Знач ТаблицаПользователейХранилища, Знач ВыходнойФайл, Знач ДоменПочтыДляGit)

	ЗаписьФайла = Новый ЗаписьТекста(ВыходнойФайл, "utf-8");
	Попытка
		ШаблонЗаписи = "%1=%1 <%1@%2>";
		Для Каждого Запись Из ТаблицаПользователейХранилища Цикл
			СтрокаДляЗаписи = СтроковыеФункции.ПодставитьПараметрыВСтроку(ШаблонЗаписи, Запись.Автор, ДоменПочтыДляGit);
			ЗаписьФайла.ЗаписатьСтроку(СтрокаДляЗаписи);
		КонецЦикла;

		ЗаписьФайла.Закрыть();
	Исключение
		ОсвободитьОбъект(ЗаписьФайла);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры


// Определяет необходимость синхронизации хранилища и репо GIT.
//
Функция ТребуетсяСинхронизироватьХранилищеСГит(Знач ФайлХранилища, Знач ЛокальныйКаталогГит) Экспорт

	ТаблицаВерсий = ПрочитатьТаблицуИсторииХранилища(ФайлХранилища);
	ТекущаяВерсия = НомерСинхронизированнойВерсии(ЛокальныйКаталогГит);
	МаксимальнаяВерсияДляРазбора = ОпределитьМаксимальнуюВерсиюВХранилище(ТаблицаВерсий);

	Лог.Информация("Номер синхронизированной версии: " + ТекущаяВерсия);
	Лог.Информация("Номер последней версии в хранилище: " + МаксимальнаяВерсияДляРазбора);

	Возврат ТекущаяВерсия < МаксимальнаяВерсияДляРазбора;

КонецФункции



//////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ОпределитьМаксимальнуюВерсиюСУчетомОграниченияСверху(Знач ТаблицаИсторииХранилища, Знач ТекущаяВерсия, Знач МаксимальнаяВерсия)

	МаксимальнаяВерсияДляРазбора = 0;
	ЧислоВерсийПлюс = 0;

	Если МаксимальнаяВерсия <> 0 Тогда
		Попытка
			МаксимальнаяВерсия = Число(МаксимальнаяВерсия);
		Исключение
			МаксимальнаяВерсия = 0;
		КонецПопытки;
	КонецЕсли;

	МаксВерсияВХранилище = ОпределитьМаксимальнуюВерсиюВХранилище(ТаблицаИсторииХранилища);

	Если МаксимальнаяВерсия > 0 Тогда
		МаксимальнаяВерсияДляРазбора = Мин(МаксВерсияВХранилище, МаксимальнаяВерсия) ;
	Иначе
		МаксимальнаяВерсияДляРазбора = МаксВерсияВХранилище;
	КонецЕсли;

	Возврат МаксимальнаяВерсияДляРазбора;

КонецФункции

Функция НомерСинхронизированнойВерсии(Знач КаталогВыгрузки)

	ПутьФайлаВерсий = ОбъединитьПути(КаталогВыгрузки, ИмяФайлаВерсииХранилища());

	ТекущаяВерсия = ПрочитатьФайлВерсийГит(ПутьФайлаВерсий);
	Если ТекущаяВерсия <> Неопределено Тогда
		Попытка
			ТекущаяВерсия=Число(ТекущаяВерсия);
		Исключение
			ТекущаяВерсия = 0;
		КонецПопытки;
	Иначе
		ТекущаяВерсия = 0;
	КонецЕсли;

	Возврат ТекущаяВерсия;

КонецФункции

Функция ОпределитьМаксимальнуюВерсиюВХранилище(Знач ТаблицаИсторииХранилища)

	Если ТаблицаИсторииХранилища.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;

	МаксимальнаяВерсия = Число(ТаблицаИсторииХранилища[0].НомерВерсии);
	Для Сч = 1 По ТаблицаИсторииХранилища.Количество()-1 Цикл
		ЧислоВерсии = Число(ТаблицаИсторииХранилища[Сч].НомерВерсии);
		Если ЧислоВерсии > МаксимальнаяВерсия Тогда
			МаксимальнаяВерсия = ЧислоВерсии;
		КонецЕсли;
	КонецЦикла;

	Возврат МаксимальнаяВерсия;

КонецФункции

Процедура ПоНомеруВерсииСохранитьКонфигурациюСредствамиTool1CD(Знач ПутьКФайлуХранилища1С, Знач ВыходнойФайл, Знач НомерВерсииХранилища)

	Логирование.ПолучитьЛог("oscript.lib.tool1cd").УстановитьУровень(Лог.Уровень());
	Лог.Отладка("Получаем файл версии <"+НомерВерсииХранилища+"> из хранилища: " + ПутьКФайлуХранилища1С);
	ЧтениеХранилища = Новый ЧтениеХранилищаКонфигурации;
	ЧтениеХранилища.ВыгрузитьВерсиюКонфигурации(ПутьКФайлуХранилища1С, ВыходнойФайл, НомерВерсииХранилища);
	Лог.Отладка("Версия хранилища выгружена");

КонецПроцедуры

Функция ИмяФайлаВыгрузкиВерсииХранилища(Знач Каталог, Знач НомерВерсии)
	Возврат ОбъединитьПути(Каталог,  "v"+Строка(НомерВерсии) +".cf");
КонецФункции

Процедура ВывестиТекстФайла(Знач ИмяФайла, Знач Кодировка = Неопределено)

	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Возврат;
	КонецЕсли;

	Если Кодировка = Неопределено Тогда
		Кодировка = "utf-8";
	КонецЕсли;

	ЧТ = Новый ЧтениеТекста(ИмяФайла, Кодировка);
	СтрокаФайла = ЧТ.Прочитать();
	ЧТ.Закрыть();

	Лог.Информация(СтрокаФайла);

КонецПроцедуры

Функция ПолучитьТекстФайла(ИмяФайла, резТекстФайла = "")

	// проверим есть ли файл
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Лог.Информация("Файл не существует."+ИмяФайла);
		Возврат Ложь;
	КонецЕсли;

	Кодировка = "utf-8";

	ФайлОтчета = Новый ЧтениеТекста(ИмяФайла, Кодировка);
	МассивСтрок = Новый Массив;

	Попытка
		Стр = "";
		Пока Стр <> Неопределено Цикл
			Стр = ФайлОтчета.ПрочитатьСтроку();
			МассивСтрок.Добавить(Стр);
		КонецЦикла;
		ФайлОтчета.Закрыть();
	Исключение
		Лог.Ошибка("При выводе файла возникла ошибка: %1", ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	Если МассивСтрок.Количество() = 0 Тогда
		Лог.Информация("Файл пуст."+ИмяФайла);
		Возврат Ложь;
	КонецЕсли;

	Лог.Отладка("В файле найдено <"+МассивСтрок.Количество()+"> строк."+ИмяФайла);
	// вывести если строки не нашлись
	текстФайла = "+---/ "+ИмяФайла+" /-------------------------------";
	Для Инд = 0 По МассивСтрок.Количество()-1 Цикл
		текстФайла = текстФайла + Символы.ПС + "|"+МассивСтрок[Инд];
	КонецЦикла;
	текстФайла = текстФайла + Символы.ПС + "+-------------";
	резТекстФайла = текстФайла;

	Возврат Истина;
КонецФункции

Функция ОбернутьВКавычки(Знач Строка)
	Возврат """" + Строка + """";
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////
// Общие функции

Функция ИмяФайлаАвторов() Экспорт
	Возврат "AUTHORS";
КонецФункции

Функция ИмяФайлаВерсииХранилища() Экспорт
	Возврат "VERSION"
КонецФункции

Процедура ЗаписатьФайлВерсийГит(Знач КаталогФайлаВерсий, Знач Версия = "") Экспорт

	ПутьКФайлуВерсий = ОбъединитьПути(КаталогФайлаВерсий, ИмяФайлаВерсииХранилища());
	Лог.Отладка("ПутьКФайлуВерсий =<"+ПутьКФайлуВерсий+">");
	Попытка
		Запись = Новый ЗаписьТекста(ПутьКФайлуВерсий, "utf-8");
		Запись.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""UTF-8""?>");
		Запись.ЗаписатьСтроку("<VERSION>" + Версия + "</VERSION>");
		Запись.Закрыть();
	Исключение
		Если Запись <> Неопределено Тогда
			ОсвободитьОбъект(Запись);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Функция ПрочитатьФайлВерсийГит(Знач ПутьКФайлуВерсий)

	Перем Версия;

	Если Не Новый Файл(ПутьКФайлуВерсий).Существует() Тогда
		ВызватьИсключение "Файл с версией ГИТ <"+ПутьКФайлуВерсий+"> не существует";
	КонецЕсли;

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуВерсий);

	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "VERSION" Тогда

			Если Не ЧтениеXML.Прочитать() Тогда
				ВызватьИсключение "Чтение файла версий, у элемента Version нет текста";
			КонецЕсли;

			Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				ВызватьИсключение "Чтение файла версий, у элемента Version нет текста";
			КонецЕсли;

			Версия = ЧтениеXML.Значение;
			Лог.Отладка("Предыдущая версия из хранилища 1С: "+Версия);

			лРезультат = Истина;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	ЧтениеXML.Закрыть();

	Возврат Версия;

КонецФункции

Процедура ДобавитьПереименование(Знач Переименования, Знач Источник, Знач Приемник)

	Приемник = СтрЗаменить(Приемник, "/", "\");
	Источник = СтрЗаменить(Источник, "/", "\");
	
	Если Не Источник = Приемник Тогда
		
		СтрокаПереименования = Переименования.Добавить();
		СтрокаПереименования.Источник = Источник;
		СтрокаПереименования.Приемник = Приемник;
			
	КонецЕсли;

КонецПроцедуры

Функция ПрочитатьФайлАвторовГитВТаблицуПользователей(Знач ПутьКФайлуАвторов) Экспорт

	Если НЕ ЗначениеЗаполнено(ПутьКФайлуАвторов) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Файл = Новый Файл(ПутьКФайлуАвторов);
	Если Не Файл.Существует() Тогда
		Возврат НоваяТаблицаПользователейХранилища();
	КонецЕсли;

	Пользователи = НоваяТаблицаПользователейХранилища();

	Попытка
		ТекстовыйФайл = Новый ЧтениеТекста(ПутьКФайлуАвторов,"utf-8");
		СтрокаФайла = "";
		Пока СтрокаФайла <> Неопределено Цикл
			СтрокаФайла = ТекстовыйФайл.ПрочитатьСтроку();
			Индекс = Найти(СтрокаФайла, "=");
			Если Индекс > 0 Тогда

				Ключ = Лев(СтрокаФайла, Индекс-1);
				АвторПредставление = Сред(СтрокаФайла, Индекс+1);

				НоваяСтрока = Пользователи.Добавить();
				НоваяСтрока.ПредставлениеАвтора = АвторПредставление;
				НоваяСтрока.Автор = Ключ;
			КонецЕсли;
		КонецЦикла;

	Исключение
		Если ТекстовыйФайл <> Неопределено Тогда
			ОсвободитьОбъект(ТекстовыйФайл);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;

	Если ТекстовыйФайл <> Неопределено Тогда
		ОсвободитьОбъект(ТекстовыйФайл);
	КонецЕсли;

	Возврат Пользователи;

КонецФункции

Процедура УстановитьРежимУдаленияВременныхФайлов(ПарамУдалятьВременныеФайлы) Экспорт
	УдалятьВременныеФайлы = ПарамУдалятьВременныеФайлы;
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////////////////////
// Вспомогательные функции

// Удаляет временные файлы при необходимости
// Если передана пустая строка, то удаляются все зарегистрированные временные файлы
//
// Параметры:
//   ПутьКФайлу - Строка - полный путь файла или пустая строка
//
Процедура УдалитьВременныеФайлыПриНеобходимости(Знач ПутьКФайлу = "") Экспорт

	Если УдалятьВременныеФайлы Тогда
		Возврат;
	КонецЕсли;

	Если ПутьКФайлу = "" Тогда
		ВременныеФайлы.Удалить();
	Иначе
		ВременныеФайлы.УдалитьФайл(ПутьКФайлу);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПутьКБазеДанныхХранилища(Знач ПутьКХранилищу) Экспорт
	
	ФайлПутиКХранилищу = Новый Файл(ПутьКХранилищу);
	Если ФайлПутиКХранилищу.Существует() и ФайлПутиКХранилищу.ЭтоКаталог() Тогда
		
		ФайлБазыДанныхХранилища = ОбъединитьПути(ФайлПутиКХранилищу.ПолноеИмя, "1cv8ddb.1CD");

	ИначеЕсли ФайлПутиКХранилищу.Существует() Тогда
	
		ФайлБазыДанныхХранилища = ФайлПутиКХранилищу.ПолноеИмя;

	Иначе
	
		ВызватьИсключение "Некорректный путь к хранилищу: " + ФайлПутиКХранилищу.ПолноеИмя;
	
	КонецЕсли;

	Возврат ФайлБазыДанныхХранилища;

КонецФункции // ПолучитьПутьКБазеДанныхХранилища

Процедура ПриСозданииОбъекта(СуществующийМенеджерПлагинов = Неопределено)

	Если СуществующийМенеджерПлагинов = Неопределено Тогда
		Плагины = Новый МенеджерПлагинов;
	Иначе
		Плагины = СуществующийМенеджерПлагинов;
	КонецЕсли;

	Плагины.АктивизироватьПлагины(ЭтотОбъект);
	
КонецПроцедуры

Функция ДатаPOSIX(Знач Дата)

	Возврат "" + Год(Дата) + "-" + ФорматДвузначноеЧисло(Месяц(Дата)) + "-" + ФорматДвузначноеЧисло(День(Дата)) + " "
			+ ФорматДвузначноеЧисло(Час(Дата)) + ":" + ФорматДвузначноеЧисло(Минута(Дата)) + ":" + ФорматДвузначноеЧисло(Секунда(Дата));

КонецФункции

Процедура ДополнитьМассив(Знач Приемник, Знач Источник)

	Для Каждого Элемент Из Источник Цикл
		Приемник.Добавить(Элемент);
	КонецЦикла;

КонецПроцедуры

Процедура УбедитьсяЧтоФайлИлиКаталогСуществует(Знач Путь)

	Файл = Новый Файл(Путь);
	Если Не Файл.Существует() Тогда
		ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Файл <%1> должен существовать", Путь);
	КонецЕсли;

КонецПроцедуры

Функция ЗапуститьПриложениеИДождатьсяЗавершения(Знач СтрокаЗапуска, Знач ТекущийКаталог = "\.")

	рез = -1;
	Если НЕ ЭтоWindows И ТекущийКаталог = "\." Тогда
		ТекущийКаталог = "./";
	КонецЕсли;

	Попытка
		КодВозврата = "";
		ЗапуститьПриложение(СтрокаЗапуска, ТекущийКаталог, Истина, КодВозврата);
		рез = КодВозврата;
	Исключение
		// Для x64 ОС
		Если ЭтоWindows Тогда
			СтрокаЗапуска = "%windir%\Sysnative\" + СтрокаЗапуска;
			КодВозврата = "";
			ЗапуститьПриложение(СтрокаЗапуска, ТекущийКаталог, Истина, КодВозврата);
			рез = КодВозврата;
		КонецЕсли;
	КонецПопытки;

	Возврат рез;

КонецФункции // ЗапуститьПриложениеИДождатьсяЗавершения()

Процедура ЗавершитьПроцесс_TGitCache_exe()
	Если ЭтоWindows Тогда
		СтрокаКоманды = "taskkill /im TGitCache.exe  /T /F";
		Лог.Отладка("ЗавершитьПроцесс_TGitCache_exe: команда "+ СтрокаКоманды);

		ЗапуститьПриложениеИДождатьсяЗавершения(СтрокаКоманды);
	КонецЕсли;
КонецПроцедуры

Функция ФорматДвузначноеЧисло(ЗначениеЧисло)
	С = Строка(ЗначениеЧисло);
	Если СтрДлина(С) < 2 Тогда
		С = "0" + С;
	КонецЕсли;

	Возврат С;
КонецФункции

Функция ДоменПочтыДляGit()
	Возврат ?(ДоменПочтыДляGitПоУмолчанию = Неопределено, "localhost", ДоменПочтыДляGitПоУмолчанию);
КонецФункции

Процедура УстановитьКоличествоЦикловОжиданияЛицензииПоУмолчанию(КоличествоЦиклов) Экспорт
	КоличествоЦикловОжиданияЛицензииПоУмолчанию = КоличествоЦиклов;
КонецПроцедуры

Функция ПолучитьКоличествоЦикловОжиданияЛицензииПоУмолчанию() Экспорт
	Возврат КоличествоЦикловОжиданияЛицензииПоУмолчанию;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////
СистемнаяИнформация = Новый СистемнаяИнформация;
ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;

Лог = Логирование.ПолучитьЛог("oscript.app.GitSync");

ДоменПочтыДляGitПоУмолчанию = "localhost";
УдалятьВременныеФайлы = Ложь;
МинимальнаяРазницаМеждуКоммитамиНовогоХранилища = 10;
